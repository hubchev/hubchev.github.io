[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "How to Use R for Data Science",
    "section": "",
    "text": "Preface\n\nAbout R\nThe programming language R enables you to handle, visualize, and analyze data. It is compatible with various operating systems (Windows, Mac, Linux) and can do a lot of things better compared to other programs like Python, Stata, Eviews, SPSS, SAS, and Excel. R is open source, extensively utilized, and there are abundant resources available for learning it. These notes are just my five cents.\n\n\nAbout the cover of the notes\nData science is a buzzword that combines different fields of knowledge such as computer science, software engineering, informatics, database management, statistics, econometrics, business intelligence, and mathematics. However, there is no universally accepted definition of it and I think it is not important to define it precisely. Kelleher & Tierney (2018, p. 97) wrote “Data science is best understood as a partnership between a data scientist and a computer.” So data science is about embracing the power of computers for scientific, commercial or social purposes. Of course, empirical models and statistics play a role in gaining meaningful insights. The graphic on the cover page may illustrate that R combines four important fields, that are, data, science, computer, and statistics.\n\n\nAbout the notes\n\n\n\n\n\n\nA pdf version of these notes is available\n\n\n\nhere.\n\n\n\nThese notes aims to support my lecture at the HS Fresenius but are incomplete and no substitute for taking actively part in class.\nI host the notes in a GitHub repo.\nI hope you find this book helpful. Any feedback is both welcome and appreciated.\nThis is work in progress so please check for updates regularly.\nThese notes offer a curated collection of explanations, exercises, and tips to facilitate learning R without causing unnecessary frustration. However, these notes don’t aim to rival comprehensive textbooks such as Wickham & Grolemund (2023).\nThese notes are published under the Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License. This means it can be reused, remixed, retained, revised and redistributed as long as appropriate credit is given to the authors. If you remix, or modify the original version of this open textbook, you must redistribute all versions of this open textbook under the same license. This script draws from the work of Navarro (2020), Muschelli & Jaffe (2022), Thulin (2021), and Ismay & Kim (2022) which is also published under the same license. \n\n\n\nAbout the author\n\n\n\n\n\n\nContact:\n\n\n\n\n\nProf. Dr. Stephan Huber\nHochschule Fresenius für Wirtschaft & Medien GmbH\nIm MediaPark 4c\n50670 Cologne\nOffice: 4e OG-3\nTelefon: +49 221 973199-523\nMail: stephan.huber@hs-fresenius.de\nPrivate homepage: www.hubchev.github.io\nGithub: https://github.com/hubchev\n\n\n\n\n\n\nFigure 1: Prof. Dr. Stephan Huber\n\n\n\n\n\n\nI am a Professor of International Economics and Data Science at HS Fresenius, holding a Diploma in Economics from the University of Regensburg and a Doctoral Degree (summa cum laude) from the University of Trier. I completed postgraduate studies at the Interdisciplinary Graduate Center of Excellence at the Institute for Labor Law and Industrial Relations in the European Union (IAAEU) in Trier. Prior to my current position, I worked as a research assistant to Prof. Dr. Dr. h.c. Joachim Möller at the University of Regensburg, a post-doc at the Leibniz Institute for East and Southeast European Studies (IOS) in Regensburg, and a freelancer at Charles University in Prague.\nThroughout my career, I have also worked as a lecturer at various institutions, including the TU Munich, the University of Regensburg, Saarland University, and the Universities of Applied Sciences in Frankfurt and Augsburg. Additionally, I have had the opportunity to teach abroad for the University of Cordoba in Spain, the University of Perugia in Italy, and the Petra Christian University in Surabaya, Indonesia. My published work can be found in international journals such as the Canadian Journal of Economics and the Stata Journal. For more information on my work, please visit my private homepage at hubchev.github.io.\nI was always fascinated by data and statistics. For example, in 1992 I could name all soccer players in Germany’s first division including how many goals they scored. Later, in 2003 I joined the introductory statistics course of Daniel Rösch. I learned among others that probabilities often play a role when analyzing data. I continued my data science journey with Harry Haupt’s Introductory Econometrics course, where I studied the infamous Jeffrey M. Wooldridge (2002) textbook. It got me hooked and so I took all the courses Rolf Tschernig offered at his chair of Econometrics, where I became a tutor at the University of Regensburg and a research assistant of Joachim Möller. Despite everything we did had to do with how to make sense out of data, we never actually used the term data science which is also absent in the more 850 pages long textbook by Wooldridge (2002). The book also remains silent about machine learning or artificial intelligence. These terms became popular only after I graduated. The Harvard Business Review article by Davenport & Patil (2012) who claimed that data scientist is “The Sexiest Job of the 21st Century” may have boosted the popularity.\nThe term “data scientist” has become remarkably popular, and many people are eager to adopt this title. Although I am a professor of data science, my professional identity is more like that of an applied, empirically-oriented international economist. My hesitation to adopt the title “data scientist” also stems from the deep respect I have developed through my interactions with econometricians and statisticians. Some of them are very committed to the rigorous development and application of empirical methods and often use complex software tools in their work. Compared to their deep expertise, I sometimes feel like a passionate amateur poking around in data to find something interesting. I often think of my ten-year-old self analyzing soccer statistics to gain a deeper understanding of the sport.\n\n\n\nFigure 1: Prof. Dr. Stephan Huber\n\n\n\nDavenport, T. H., & Patil, D. (2012). Data scientist: The sexiest job of the 21st century. Harvard Business Review, 90(5), 70–76.\n\n\nIsmay, C., & Kim, A. Y. (2022). Statistical inference via data science: A ModernDive into R and the tidyverse. CRC Press. https://moderndive.com/\n\n\nKelleher, J. D., & Tierney, B. (2018). Data science. MIT Press.\n\n\nMuschelli, J., & Jaffe, A. (2022). Introduction to R for public health researchers. GitHub. https://github.com/muschellij2/intro_to_r\n\n\nNavarro, D. (2020). Learning statistics with r (Version 0.6). https://learningstatisticswithr.com\n\n\nThulin, M. (2021). Modern statistics with R: From wrangling and exploring data to inference and predictive modelling. Eos Chasma Press. https://www.modernstatisticswithr.com/\n\n\nWickham, H., & Grolemund, G. (2023). R for data science (2e). https://r4ds.hadley.nz/\n\n\nWooldridge, J. M. (2002). Introductory econometrics: A modern approach. In Delhi: Cengage Learnng (2nd ed.). South-Western.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "01_install.html",
    "href": "01_install.html",
    "title": "1  Getting started with R",
    "section": "",
    "text": "1.1 Why R?\nR is a free and open-source programming language that provides a wide range of advanced statistics capabilities, state-of-the-art graphics, and powerful data manipulation capabilities. It supports larger data sets, reads any type of data, and runs on multiple platforms. R makes it easier to automate tasks, organize projects, ensure reproducibility, and find and fix errors, and anyone can contribute packages to improve its functionality. Moreover, the following points are worth to emphasize:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting started with R</span>"
    ]
  },
  {
    "objectID": "01_install.html#sec:whyR",
    "href": "01_install.html#sec:whyR",
    "title": "1  Getting started with R",
    "section": "",
    "text": "R is an artist! Check out:\n\nThe R Graph Gallery\nR CHARTS by R CODER\n\nR is an employment insurance! Programming is a core skill in research, economics, and business. If you can write code, you have plenty of opportunities to earn a decent salary. R is one of the most widely used programming languages in the world today. It is used in almost every industry such as finance, banking, medicine or manufacturing. R is used for portfolio management, risk analytics in finance and banking industries. Even if you need to learn a new programming language later, knowing R makes it much easier to pick up another one.\nR uses the computer and computers are great! Doing statistics on a computer is faster, easier and more powerful than doing it by hand. Computers are an extension to your brain and can do repetitive tasks better and faster without making logical errors. The only reason to do statistical calculations with pencil and paper is for learning purposes.\nExcel is limited! Using spreadsheets software like Microsoft Excel for research can be problematic. It’s easy to lose track of operations, making the process difficult to oversee and document. Command-line programs are maybe not as easy to learn but offer a more straightforward approach that allows the results to be replicated easily.\nR is open source! Proprietary software expansive, support can only be provided by the copyright owner which means the software expires and you can’t do anything against it. Moreover, security issues cannot be checked as the source code is not available, and possibilities for customization are limited. R is yours and everybody can contribute to its success.\nR is big! When you download and install R, you get some basic packages, that contain functions that allow you to do already a lot of things. Beyond that, you can write your own packages or install user-written packages that extend your possibilities. With over 20,684 packages on the CRAN repository and many more available on GitHub and other platforms, R’s extensive library supports a wide variety of data science tasks. Its widespread use and open-source availability have cemented R as a standard tool in data science and ensured that there are multiple approaches to most data handling processes. These can be easily adopted.\n\n\n\n\n\n\n\nR has weaknesses\n\n\n\nFor newcomers to programming, learning R can be difficult. It’s a little quirky and can be slower than languages like Python, MATLAB, C/C++ or Java. The R tools are spread across many packages, which can overwhelm beginners. Although there is no centralized support, there is a helpful online community and many developers who make their code freely available. However, it can be difficult for beginners to find the right solution as there are often many different ways to tackle the same problem.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting started with R</span>"
    ]
  },
  {
    "objectID": "01_install.html#howtolearnr",
    "href": "01_install.html#howtolearnr",
    "title": "1  Getting started with R",
    "section": "1.2 How to learn R",
    "text": "1.2 How to learn R\nThere are many different approaches to learning R. It pretty much depends on your preferences, needs, goals, prerequisites and limitations. It is up to you to search and find a suitable way to achieve your learning goals. While I hope you find my notes helpful, I additionally provide in section Section 1.3 a list of other resources that are worth considering. To start with, I recommend my swirl courses that provide an interactive learning environment, see Chapter 2.\n\n\n\n\n\n\nMake your hands dirty!\n\n\n\nLearning a programming language can, like learning a foreign language, be daunting and frustrating. However, if you put in the effort and are not afraid to make mistakes, anybody can learn it. You don’t have to be a nerd. To have a guide next to you can help and speed up your progress significantly. The key is taking action and getting involved. I mean, do write code. Try to copy the code that you read here and elsewhere. Explore what the code does on your machine. Don’t be afraid to make errors. Your PC will not explode. In this paper, most of the code is written in a manner that allows you to effortlessly copy and reproduce the output on your PC. Take advantage of this opportunity and go for it! Hands-on practice is far more enjoyable than merely reading through the material.\n\n\nHere are some comments that may help you to learn efficiently:\n\nComputers need clear and precise instructions to work: They can’t handle mistakes or unclear directions. Even small errors like a missing comma or an unclosed bracket can cause your code to not work. Computers do exactly what you tell them, no more and no less.\nCopy, paste, and tweak: While learning code from scratch is sometimes essential, you can speed up your work by modifying code that already exists. I call this the “copy, paste, and tweak” approach. It is a good way to learn code and get a job done quick.\n\nHave a purpose when coding: Rather than learning to code for its own sake, it is more fun and you’ll probably learn faster when you have a goal in mind. Try to analyze data that you are interested in. Another good exercise is replicating a research paper.\nPractice is key: The best method to improving your coding skills is through lots of practice. Consequently, these notes give you plenty of exercises.\nUse ChatGPT: The usage of supporting tools is not forbidden. ChatGPT can help you to understand code and brainstorm solutions. However, it’s important to know that ChatGPT might suggest complex methods when there are shorter and more elegant solutions available Absolute beginners might find ChatGPT’s solutions overwhelming and have difficulties to tweak the proposed sketch of a solution. So, use it thoughtfully.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting started with R</span>"
    ]
  },
  {
    "objectID": "01_install.html#sec-Rlearninglit",
    "href": "01_install.html#sec-Rlearninglit",
    "title": "1  Getting started with R",
    "section": "1.3 Learning resources",
    "text": "1.3 Learning resources\nThousand of freely available books and resources exist. bookdown.org and the Big Book of R are two vast collections of links to R books that might verify my claim.\nIn RStudio you find in the right side at the bottom a panel that is called Help. There you find a lot of links, manuals, and references that offer you tons of resources to learn R for free including: education.rstudio.com and Links for Getting Help with R. At the top right of RStudio you find a panel called tutorial. Here you can install the learnr package that offers some nice interactive tutorials.\nSince you may feel overwhelmed by the number of resources, I would like to highlight some books:\n   \n\nTimbers et al. (2022): Data Science: A First Introduction is a free and up to date book that comes with exercises with worksheets that are available on UBC-DSCI GitHub repository\nWickham & Grolemund (2023): R for Data Science: Import, Tidy, Transform, Visualize, and Model Data is the most popular source to learn R. It focuses on introducing the tidyverse package and is freely available online.\nIrizarry (2022): Introduction to Data Science: Data Analysis and Prediction Algorithms With R is a complete, up to date, and applied introduction.\nVenables et al. (2022) An Introduction to R: Notes on R: A Programming Environment for Data Analysis and Graphics is a manual from the R Core Development Team that shows how to use R without having to install and load additional packages.\nNeth (2023): Data Science for Psychologists is a comprehensive introduction to R and data science for non experts of both programming and data science. It uses a variety of data types and includes many examples and exercises.\nKabacoff (2024): Modern Data Visualization with R teaches how to create graphs from scratch providing a lot of examples that you can copy, paste and tweak.\n\nSome other sources that are worth mentioning are these:\n\nThe search engine www.rseek.org is R specific and often better than www.google.com as it only searches for content that has to do with the programming language R.\nOn rdocumentation.org you can find the complete documentation of all R packages.\nMany find these cheatsheets helpful.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting started with R</span>"
    ]
  },
  {
    "objectID": "01_install.html#sec-r-rstudio",
    "href": "01_install.html#sec-r-rstudio",
    "title": "1  Getting started with R",
    "section": "1.4 What are R and RStudio?",
    "text": "1.4 What are R and RStudio?\nThroughout this book, I will assume that you are using R via RStudio. First time users often confuse the two. At its simplest, R is like a car’s engine while RStudio is like a car’s dashboard as illustrated in Figure Figure 1.1.\n\n\n\nFigure 1.1: Analogy of difference between R and RStudio\n\n\n\n\n\n\nMore precisely, R is a programming language that runs computations, while RStudio is an integrated development environment (IDE) that provides an interface by adding many convenient features and tools. So just as the way of having access to a speedometer, rearview mirrors, and a navigation system makes driving much easier, using RStudio’s interface makes using R much easier as well.\nMuch as we don’t drive a car by interacting directly with the engine but rather by interacting with elements on the car’s dashboard, we won’t be using R directly but rather we will use RStudio’s interface. After you install R and RStudio on your computer, you’ll have two new programs (also called applications) you can open. We’ll always work in RStudio and not in the R application. Figure Figure 1.2 shows what icon you should be clicking on your computer.\n\n\n\nFigure 1.2: Icons of R versus RStudio on your computer\n\n\n\n\n\n\nAfter you open RStudio, you should see something similar to Figure Figure 1.3 where three or four panels dividing the screen.\n\n\n\nFigure 1.3: RStudio interface to R\n\n\n\n\n\n\n\nThe Environment panel, where a list of the data you have imported and created can be found.\nThe Files, Plots and Help panel, where you can see a list of available files, will be able to view graphs that you produce, and can find help documents for different parts of R.\nThe Console panel, used for running code. This is where we’ll start with the first few examples.\nThe Script panel, used for writing code. This is where you’ll spend most of your time working.\n\nThe Console panel will contain R’s startup message, which shows information about which version of R you’re running. My startup message at the time of writing was as follows:\n R version 4.3.3 (2024-02-29) -- \"Angel Food Cake\"\n Copyright (C) 2024 The R Foundation for Statistical Computing\n Platform: x86_64-pc-linux-gnu (64-bit)\n\n R is free software and comes with ABSOLUTELY NO WARRANTY.\n You are welcome to redistribute it under certain conditions.\n Type 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\n R is a collaborative project with many contributors.\n Type 'contributors()' for more information and\n 'citation()' on how to cite R or R packages in publications.\n\n Type 'demo()' for some demos, 'help()' for on-line help, or\n 'help.start()' for an HTML browser interface to help.\n Type 'q()' to quit R.\nIf you don’t have panel number 4, open it by opening an existing R-script or creating a new one. You can create a new on by clicking Ctrl+Shift+N (alternatively, you can use the menu: File\\(\\rightarrow\\)New File\\(\\rightarrow\\)R Script).\nYou can resize the panels as you like, either by clicking and dragging their borders or using the minimise/maximise buttons in the upper right corner of each panel. Clicking Ctrl++ and Ctrl+- allows to make the fonts larger or smaller.\nWhen you exit RStudio, you will be asked if you wish to save your workspace, meaning that the data that you’ve worked with will be stored so that it is available the next time you run R. That might sound like a good idea, but in general, I recommend that you don’t save your workspace, as that often turns out to cause problems down the line. It is almost invariably a much better idea to simply rerun the code you worked with in your next R session.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting started with R</span>"
    ]
  },
  {
    "objectID": "01_install.html#how-to-use-r-and-rstudio-without-installation",
    "href": "01_install.html#how-to-use-r-and-rstudio-without-installation",
    "title": "1  Getting started with R",
    "section": "1.5 How to use R and RStudio without installation",
    "text": "1.5 How to use R and RStudio without installation\nIf you don’t want to install R on your PC or you don’t have admin rights to do so, you can use RStudio online doing cloud computing on https://posit.cloud/. Posit Cloud (formerly RStudio Cloud) is a cloud-based solution that allows anyone to do, share, teach and learn data science online. It is free for individuals with some restrictions and limited capacities.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting started with R</span>"
    ]
  },
  {
    "objectID": "01_install.html#installing",
    "href": "01_install.html#installing",
    "title": "1  Getting started with R",
    "section": "1.6 Installing R and RStudio",
    "text": "1.6 Installing R and RStudio\nYou will first need to download and install both R and RStudio (Desktop version) on your computer. It is important that you install R first and then install RStudio.\n\nDo this firstly: Download and install R by going to https://cloud.r-project.org/.\n\nIf you are a Windows user: Click on “Download R for Windows”, then click on “base”, then click on the Download link.\nIf you are macOS user: Click on “Download R for (Mac) OS X”, then under “Latest release:” click on R-X.X.X.pkg, where R-X.X.X is the version number. For example, the latest version of R as of March 29, 2024 was R-4.3.3.\nIf you are a Linux user: Click on “Download R for Linux” and choose your distribution for more information on installing R for your setup.\n\nDo this secondly: Download and install RStudio at https://www.rstudio.com/products/rstudio/download/.\n\nScroll down to “Installers for Supported Platforms” near the bottom of the page.\nClick on the download link corresponding to your computer’s operating system.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting started with R</span>"
    ]
  },
  {
    "objectID": "01_install.html#what-is-a-function-in-r",
    "href": "01_install.html#what-is-a-function-in-r",
    "title": "1  Getting started with R",
    "section": "1.7 What is a function in R?",
    "text": "1.7 What is a function in R?\nOne of the keys to understand R is a functional programming language. If you want R to do something, you must use a function. Or, to put in in the words of Chambers (2017, p. 4):\n\n“Everything that happens is a function call.”\n\nFor example, when you like to exit R, you do it with the function q():\n&gt; q()\nSave workspace image? [y/n/c]: \nIf you don’t want to be asked what you want to do with your workspace (that is the place where you store all your objects, see section Section 1.8) you can do it with an argument that is part of the function:\n&gt; q(save = \"no\")\nTo learn more about a function, you can access its documentation by typing a question mark followed by the function name into the Console:\n?q()\nUnfortunately, the documentation can sometimes be a bit confusing for beginners in applied contexts. However, the documentation for all functions is structured similarly, typically featuring several key sections:\n\nDescription: A brief overview of what the function does.\nUsage: How to use the function, including the function name and its arguments.\nArguments: Detailed descriptions of each argument the function accepts, including what types of values are expected.\nDetails: Additional details about the function’s behavior and any important notes.\nExamples: Practical examples demonstrating how to use the function in various contexts.\n\nUnderstanding these sections can significantly enhance your ability to navigate and utilize R documentation effectively.\nAn excerpt of the R Documentation for the function q() is shown in Figure 1.4. Here, we observe that the function has three arguments that you can manipulate. If you do not specify any of these arguments explicitly, we see that by default, R sets the three arguments as shown.\n\n\n\nFigure 1.4: The R Documentation of q()",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting started with R</span>"
    ]
  },
  {
    "objectID": "01_install.html#sec-objects",
    "href": "01_install.html#sec-objects",
    "title": "1  Getting started with R",
    "section": "1.8 What are objects in R?",
    "text": "1.8 What are objects in R?\nEverything you do is made with a function and\n\n“everything that exists in R is an object” (Chambers, 2017, p. 4).\n\nObjects are the fundamental units that are used to store information. Objects can be created using a variety of data types, including vectors, matrices, data frames, lists, functions. All objects are shown in the workspace which is shown in the Environment panel.\nIn R, you can show the content of the workspace with ls(). The function rm() allows to remove objects and with rm(list=ls()) you clear all objects from the workspace.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting started with R</span>"
    ]
  },
  {
    "objectID": "01_install.html#sec-packages",
    "href": "01_install.html#sec-packages",
    "title": "1  Getting started with R",
    "section": "1.9 What are R packages?",
    "text": "1.9 What are R packages?\nIn this section, I’ll describe how to work with packages using the Rstudio tools. A package is a collection of functions, data sets and other R objects that are all grouped together under a common name. More than 10,000 packages are available at the official repository (CRAN)1 and many more are publicly available through the internet.\nHowever, before we get started, there’s a critical distinction that you need to understand, which is the difference between having a package installed on your computer, and having a package loaded in R. When you install R on your computer only a small number of packages come bundled with the basic R installation. The installed packages are on your computer. The critical thing to remember is that just because something is on your computer doesn’t mean R can use it. In order for R to be able to use one of your installed packages, that package must also be loaded. Generally, when you open up R, only a few of these packages (about 7 or 8) are actually loaded.\n\n\n\n\n\n\nPackage management\n\n\n\n\nA package must be installed before it can be loaded.\nA package must be loaded before it can be used.\n\n\n\nWe only need to install a package once on our computer. However, to use the package, we need to load it every time we start a new R environment or R Studio, respectively.\n\n1.9.1 Package installation\nTo install an R package you can use the GUI of R Studio or the command line. In R Studio you can click on the Packages tab, then on the Install button, then you must search for a package and click Install. An alternative way to install a package is by typing\n\ninstall.packages(\"package_name\")\n\nin the console pane of RStudio and pressing Return/Enter on your keyboard. Note you must include the quotation marks around the name of the package.\nIf you want to update a previously installed package to a newer version, you need to re-install it by repeating the earlier steps or you use update.packages(). To uninstall packages you can use remove.packages().\n\n\n\n\n\n\nSpeed up the installation of packages\n\n\n\nThe installation of packages can take some time. However, if your CPU has many cores, you can speed up the process a lot using the argument Ncpus like this update.packages(ask = F, Ncpus = 4L). This option allows you to adjust the number of parallel processes R can use on your PC. So, if you have a CPU with many cores you can increase that number. A tutorial on how to set the number of cores used by R permanently can be found here.\n\n\n\n\n1.9.2 Package loading\nRecall that after you’ve installed a package, you need to load it. We do this by using the library() command.\nFor example, to load the ggplot2 package, run the following code in the console pane. What do we mean by “run the following code”? Either type or copy-and-paste the following code into the console pane and then hit the Enter key.\n\nlibrary(\"ggplot2\")\n\nIf after running the earlier code, a blinking cursor returns next to the &gt; “prompt” sign, it means you were successful and the ggplot2 package is now loaded and ready to use. If, however, you get a red “error message” that reads\n\nError in library(ggplot2) : there is no package called ‘ggplot2’\n\nIt means that you didn’t successfully install it. If you get this error message, go back to section Section 1.9.1 on R package installation and make sure to install the ggplot2 package before proceeding.\nOne very common mistake new R users make when wanting to use particular packages is they forget to load them first by using the library() command we just saw. Remember: you have to load each package you want to use every time you start RStudio. If you don’t first load a package, but attempt to use one of its features, you’ll see an error message similar to:\n\nError: could not find function\n\nR is informing you that you are attempting to use a function from a package that has not yet been loaded. Forgetting to load packages is a common mistake made by new users, and it can be a bit frustrating to get used to at first. However, with practice, it will become second nature for you. Unloading packages can be done with detach(, unload=TRUE).\n\n\n1.9.3 Simplified package management with p_load\nThere is a convenient way to handle both package installation and loading without the need for manual checks. The p_load() function does this seamlessly by verifying if a package is installed; if not, it installs the package.\nFor instance, instead of the traditional approach:\n\ninstall.packages(\n  c(\"arrow\", \"babynames\", \"curl\", \"duckdb\", \"gapminder\", \n    \"ggrepel\", \"ggridges\", \"ggthemes\", \"hexbin\", \"janitor\", \"Lahman\", \n    \"leaflet\", \"maps\", \"nycflights13\", \"openxlsx\", \"palmerpenguins\", \n    \"repurrrsive\", \"tidymodels\", \"writexl\")\n  )\nlibrary(\n  c(\"arrow\", \"babynames\", \"curl\", \"duckdb\", \"gapminder\", \n    \"ggrepel\", \"ggridges\", \"ggthemes\", \"hexbin\", \"janitor\", \"Lahman\", \n    \"leaflet\", \"maps\", \"nycflights13\", \"openxlsx\", \"palmerpenguins\", \n    \"repurrrsive\", \"tidymodels\", \"writexl\")\n  )\n\nYou can streamline the process as follows:\n\n# Install and load the required packages using p_load\nif (!require(pacman)) install.packages(\"pacman\")\n\npacman::p_load(\n  arrow, babynames, curl, duckdb, gapminder, \n  ggrepel, ggridges, ggthemes, hexbin, janitor, Lahman, \n  leaflet, maps, nycflights13, openxlsx, palmerpenguins, \n  repurrrsive, tidymodels, writexl\n)\n\nThe line\n\nif (!require(pacman)) install.packages(\"pacman\")\n\nensures the installation of the pacman package, which is necessary for using the p_load function.\nBefore you load packages in a script, I recommend to unload all other packages with\n\npacman::p_unload(all)\n\nto avoid conflicts of functions.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting started with R</span>"
    ]
  },
  {
    "objectID": "01_install.html#base-r-and-the-tidyverse-universe",
    "href": "01_install.html#base-r-and-the-tidyverse-universe",
    "title": "1  Getting started with R",
    "section": "1.10 Base R and the tidyverse universe",
    "text": "1.10 Base R and the tidyverse universe\nUpon successfully installing R, you gain access to functions that are part of Base R. This includes standard packages automatically installed and loaded with each R session, such as stats, utils, and graphics, providing a broad spectrum of functionalities for statistical analysis and graphical capabilities (see Venables et al., 2022). However, the syntax in Base R can become complex and less intuitive for users. Consequently, many individuals, including Hadley Wickham, the Chief Data Scientist at Posit (formerly RStudio), and his team, have developed an alternative suite of packages known as the tidyverse. These packages share a common philosophy and syntax, emphasizing readability and ease of use. We will heavily utilize the tidyverse in the following sections.\n\n\n\nFigure 1.5: The tidyverse universe\n\n\n\n\n\n\nThe R package tidyverse (see Figure 1.5) is a comprehensive collection of R packages including popular packages such are ggplot2, dplyr, tidyr, readr, purrr, tibble, stringr, and forcats, which together offer extensive capabilities for data modeling, transformation, and visualization.\nHow to do data science with tidyverse is the subject of multiple books and tutorials. In particular, the popular book R for Data Science by Wickham & Grolemund (2023) is all about the tidyverse universe. Thus, I highly recommend reading sections Workflow: basics), Data transformation, and Data tidying. Additionally, explore www.tidyverse.org for more resources, and consider completing the tidyverse module in my swirl package, swirl-it, as detailed in section Chapter 2.\nTo install and load tidyverse run the following lines of code:\n\ninstall.packages(\"tidyverse\")\nlibrary(\"tidyverse\")",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting started with R</span>"
    ]
  },
  {
    "objectID": "01_install.html#are-there-some-guidelines-for-working-with-r",
    "href": "01_install.html#are-there-some-guidelines-for-working-with-r",
    "title": "1  Getting started with R",
    "section": "1.11 Are there some guidelines for working with R?",
    "text": "1.11 Are there some guidelines for working with R?\nTo avoid running into issues with R, it’s important to be aware of the some conventions, rules, and best practices that apply to the language. While it can be tedious to go through all of the do’s and don’ts in detail, following them can make your life with R much easier. Trust me, the benefits of adhering to these guidelines will become clear over time. Here is a non-exhaustive list:\n\nDo remember that R programming language is case sensitive.\nDo start names of objects such as vectors, numbers, variables, and data frames with a letter, not a number.\nDo avoid using dots in names of objects.\nDo avoid using certain keywords in naming objects, such as if, else, repeat, while, function, for, in, next, break, TRUE, FALSE, NULL, Inf, NaN, and NA.\nDo use front slash / instead of backslash \\ for navigating the file system (see Appendix B).\nDo not use whitespace and indentation for naming files, directories, or objects.\nDo not ignore warnings or errors unless you know what they mean.\nDo define objects to represent hard-coded values instead of using them directly in code.\nDo remember to (install and) load packages that contain functions you want to use.\nDo remember to set your working directory. (Tip: Use R Studio projects, see Section B.4)\nDo remember to comment your code.\nDo use &lt;- instead of = for assignment.\nDo clear the environment at the beginning of a script: rm(list = ls())\n\nAn exhaustive style guide on how to write code can be found here.\n\n\n\nFigure 1.1: Analogy of difference between R and RStudio\nFigure 1.2: Icons of R versus RStudio on your computer\nFigure 1.3: RStudio interface to R\nFigure 1.4: The R Documentation of q()\nFigure 1.5: The tidyverse universe\n\n\n\nChambers, J. M. (2017). Extending R. CRC Press.\n\n\nIrizarry, R. A. (2022). Introduction to data science: Data analysis and prediction algorithms with R. Accessed January 30, 2023; CRC Press. https://rafalab.github.io/dsbook/\n\n\nKabacoff, R. (2024). Modern data visualization with R. Chapman; Hall/CRC. https://rkabacoff.github.io/datavis/\n\n\nNeth, H. (2023). ds4psy: Data science for psychologists. Social Psychology; Decision Sciences, University of Konstanz. https://doi.org/10.5281/zenodo.7229812\n\n\nTimbers, T., Campbell, T., & Lee, M. (2022). Data science: A first introduction. Accessed January 30, 2023; CRC Press. https://datasciencebook.ca/\n\n\nVenables, W. N., Smith, D. M., & R Core Team. (2022). An introduction to R: Notes on R: A programming environment for data analysis and graphics (Version 4.3.2 (2023-10-31)). http://cran.r-project.org/doc/manuals/R-intro.pdf\n\n\nWickham, H., & Grolemund, G. (2023). R for data science (2e). https://r4ds.hadley.nz/",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting started with R</span>"
    ]
  },
  {
    "objectID": "01_install.html#footnotes",
    "href": "01_install.html#footnotes",
    "title": "1  Getting started with R",
    "section": "",
    "text": "CRAN is a network of ftp and web servers around the world that store identical, up-to-date, versions of code and documentation for R, see: https://cran.r-project.org.↩︎",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Getting started with R</span>"
    ]
  },
  {
    "objectID": "10_swirl.html",
    "href": "10_swirl.html",
    "title": "2  An interactive introduction using swirl",
    "section": "",
    "text": "2.1 Set up swirl\nTo install swirl and my learning modules, please follow my instructions precisely!\nOpen Rstudio and type in the console the following:\ninstall.packages(\"swirl\")\nlibrary(\"swirl\")\ninstall_course_github(\"hubchev\", \"swirl-it\")\nswirl()\nThe above four lines of code do the following:\nAfter initiating the swirl environment, follow the instructions displayed in the Console. Specifically, select the swirl-it course and the huber-intro-1 learning module to begin. You can exit swirl at any moment by typing bye() into the Console or pressing the Esc key on your keyboard.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>An interactive introduction using swirl</span>"
    ]
  },
  {
    "objectID": "10_swirl.html#set-up-swirl",
    "href": "10_swirl.html#set-up-swirl",
    "title": "2  An interactive introduction using swirl",
    "section": "",
    "text": "Install the swirl package, ensuring it’s available for use in R.\nLoad the swirl package, making its functions accessible.\nInstall my swirl course that is hosted on GitHub, making its functions accessible.\nBy entering swirl into the Console (located at the bottom-left in RStudio) and pressing the Enter key, you initiate swirl. This begins your interactive learning experience with the package.\n\n\n\n\n\n\n\nTip 2.1: If the course has failed to install,\n\n\n\n\n\nyou can try to download the file swirl-it.swc from github.com/hubchev/swirl-it and install the course with loading the swirl package and typing install_course() into the console.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>An interactive introduction using swirl</span>"
    ]
  },
  {
    "objectID": "10_swirl.html#swirl-it-huber-intro-1",
    "href": "10_swirl.html#swirl-it-huber-intro-1",
    "title": "2  An interactive introduction using swirl",
    "section": "2.2 swirl-it: huber-intro-1",
    "text": "2.2 swirl-it: huber-intro-1\n\n\n\n\n\n\nClick to see the full content of the module\n\n\n\n\n\nWelcome to this swirl course. If you find any errors or if you have suggestions for improvement, please let me know via stephan.huber@hs-fresenius.de.\nThe RStudio interface consists of several windows. You can change the size of the windows by dragging the grey bars between the windows. We’ll go through the most important windows now.\nBottom left is the Console window (also called command window/line). Here you can type commands after the &gt; prompt and R will then execute your command. This is the most important window, because this is where R actually does stuff.\nTop left is the Editor window (also called script window). Here collections of commands (scripts) can be edited and saved. When you do not get this window, you can open it with ‘File’ &gt; ‘New’ &gt; ‘R script’.\nJust typing a command in the editor window is not enough, it has to be send to the Console before R executes the command. If you want to run a line from the script window (or the whole script), you can click ‘Run’ or press ‘CTRL+ENTER’ to send it to the command window.\nThe shortcut to send the current line to the console and run it there is _________.\n\nCTRL+SHIFT\nCTRL+ENTER\nCTRL+SPACE\nSHIFT+ENTER\n\nHint: You find all shortcuts in the menu at Tools &gt; Keyboard Shortcuts Help or click ALT+SHIFT+K. If you are a Mac user, your shortcut is ‘Cmd+Return’ instead of ‘SHIFT+ENTER’. To move on type skip().\n\n\n\n\n\n\nSolution\n\n\n\n\n\nanswer: b\n\n\n\nTop right is the environment window (a.k.a workspace). Here you can see which data R has in its memory. You can view and edit the values by clicking on them.\nBottom right is the plots / packages / help window. Here you can view plots, install and load packages or use the help function.\nThe first thing you should do whenever you start Rstudio is to check if you are happy with your working directory. That directory is the folder on your computer in which you are currently working. That means, when you ask R to open a certain file, it will look in the working directory for this file, and when you tell R to save a data file or figure, it will save it in the working directory.\nYou can check your working directory with the function getwd(). So let’s do that. Type in the command window getwd() .\n\ngetwd()\n\n[1] \"/home/sthu/Dropbox/hsf/courses/dsr\"\n\n\nAre you happy with that place? if not, you should set your working directory to where all your data and script files are (or will be). Within RStudio you can go to ‘Session’ &gt; ‘Set working directory’ &gt; ‘Choose directory’. Please do this now.\nInstead of clicking, you can use the function setwd(\"/YOURPATH\"). For example, setwd(\"/Users/MYNAME/MYFOLDER\") or setwd(\"C:/Users/jenny/myrstuff\"). Make sure that the slashes are forward slashes and that you do not forget the apostrophes. R is case sensitive, so make sure you write capitals where necessary.\nWhenever you want R to do something you need to use a function. It is like a command. All functions of R are organized in so-called packages or libraries. With the standard installation many packages are already installed. However, many more exist and some of them are really cool. For example, with installed.packages() all installed packages are listed. Or, with swirl(), you started swirl.\nOf course, you can also go to the Packages window at the bottom right. If the box in front of the package name is ticked, the package is loaded (activated) and can be used. To see via Console which packages are loaded type in the console (.packages())\n\n(.packages())\n\n[1] \"stats\"     \"graphics\"  \"grDevices\" \"utils\"     \"datasets\"  \"methods\"  \n[7] \"base\"     \n\n\nThere are many more packages available on the R website. If you want to install and use a package (for example, the package called geometry) you should first install the package. Type install.packages(\"geometry\") in the console. Don’t be afraid about the many messages. Depending on your PC and your internet connection this may take some time.\n\ninstall.packages(\"geometry\")\n\nAfter having installed a package, you need to load the package. That is a bit annoying but essential. Type in library(\"geometry\") in the Console. You also did this for the swirl package (otherwise you couldn’t have been doing these exercises).\n\nlibrary(\"geometry\")\n\nCheck if the package is loaded typing (.packages())\n\n(.packages())\n\nNow, let’s get started with the real programming.\nR can be used as a calculator. You can just type your equation in the command window after the &gt;. Type 10^2 + 36.\n\n10^2 + 36\n\n[1] 136\n\n\nAnd R gave the answer directly. By the way, spaces do not matter.\nIf you use brackets and forget to add the closing bracket, the &gt; on the command line changes into a +. The + can also mean that R is still busy with some heavy computation. If you want R to quit what it was doing and give back the &gt;, press ESC.\nYou can also give numbers a name. By doing so, they become so-called variables which can be used later. For example, you can type in the command window A &lt;- 4.\n\nA &lt;- 4\n\nThe &lt;- is the so-called assignment operator. It allows you to assign data to a named object in order to store the data.\nDon’t be confussed about the term object. All sorts of data are stored in so-called objects in R. All objects of a session are shown in the Environment window. In the second part of this course, I will introduce different data types.\nYou can see that A appeared in the environment window in the top right corner, which means that R now remembers what A is.\nYou can also ask R what A is. Just type A in the command window.\n\nA\n\n[1] 4\n\n\nYou can also do calculations with A. Type A * 5 .\n\nA*5\n\n[1] 20\n\n\nIf you specify A again, it will forget what value it had before. You can also assign a new value to A using the old one. Type A &lt;- A + 10 .\n\nA &lt;- A + 10\n\nYou can see that the value in the environment window changed.\nTo remove all variables from R’s memory, type rm(list=ls()) .\n\nrm(list=ls())\n\nYou see that the environment window is now empty. You can also click the broom icon (clear all) in the environment window. You can see that RStudio then empties the environment window. If you only want to remove the variable A, you can type rm(A).\nLike in many other programs, R organizes numbers in scalars (a single number, 0-dimensional), vectors (a row of numbers, also called arrays, 1-dimensional) and matrices (like a table, 2-dimensional).\nThe A you defined before was a scalar. To define a vector with the numbers 3, 4 and 5, you need the function c(), which is short for concatenate (paste together). Type B=c(3,4,5).\n\nB=c(3,4,5)\n\nIf you would like to compute the mean of all the elements in the vector B from the example above, you could type (3+4+5)/3. Try this\n\n(3+4+5)/3\n\n[1] 4\n\n\nBut when the vector is very long, this is very boring and time-consuming work. This is why things you do often are automated in so-called functions. For example, type mean(x=B) and guess what this function mean() can do for you.\n\nmean(x=B)\n\n[1] 4\n\n\nWithin the brackets you specify the arguments. Arguments give extra information to the function. In this case, the argument x says of which set of numbers (vector) the mean should be computed (namely of B). Sometimes, the name of the argument is not necessary; mean(B) works as well. Try it.\n\nmean(B)\n\n[1] 4\n\n\nCompute the sum of 4, 5, 8 and 11 by first combining them into a vector and then using the function sum. Use the function c inside the function sum.\n\nsum(c(4,5,8,11))\n\n[1] 28\n\n\nThe function rnorm, as another example, is a standard R function which creates random samples from a normal distribution. Type rnorm(10) and you will see 10 random numbers\n\nrnorm(10)\n\n [1] -0.7302232 -0.3438506  0.4524433  1.3310585  0.6603572  0.6626675\n [7]  0.2854379  0.5421285 -0.4228757  0.6150998\n\n\nHere rnorm is the function and the 10 is an argument specifying how many random numbers you want - in this case 10 numbers (typing n=10 instead of just 10 would also work). The result is 10 random numbers organised in a vector with length 10.\nIf you want 10 random numbers out of normal distribution with mean 1.2 and standard deviation 3.4 you can type rnorm(10, mean=1.2, sd=3.4). Try this.\n\nrnorm(10, mean=1.2, sd=3.4)\n\n [1]  1.1996430  3.2893820  0.1364925 -8.2360680 -1.3896285 -2.8773247\n [7] -6.3892012  2.0755653  1.3501564 -2.7607810\n\n\nThis shows that the same function (rnorm()) may have different interfaces and that R has so called named arguments (in this case mean and sd).\nComparing this example to the previous one also shows that for the function rnorm only the first argument (the number 10) is compulsory, and that R gives default values to the other so-called optional arguments. Use the help function to see which values are used as default by typing ?rnorm.\n\n?rnorm\n\nYou see the help page for this function in the help window on the right. RStudio has a nice features such as autocompletion and snapshots of the R documentation. For example, when you type rnorm( in the command window and press TAB, RStudio will show the possible arguments.\nYou can also store the output of the function in a variable. Type x=rnorm(100).\n\nx=rnorm(100)\n\nNow 100 random numbers are assigned to the variable x, which becomes a vector by this operation. You can see it appears in the Environment window.\nR can also make graphs. Type plot(x) for a very simple example.\n\nplot(x)\n\n\n\n\n\n\n\n\nThe 100 random numbers are now plotted in the plots window on the right.\nYou now are more familiar to RStudio and you know some basic R stuff. In particular, you know…\n…that everything in R is said with functions,\n…that functions can but don’t have to have arguments,\n…that you can install packages which contain functions,\n…that you must load the installed packages every time you start a session in RStudio, and\n…that this is just the beginning. Thus, please continue with the second module of this introduction.\n\n\n\nAfter you have successfully finished learning module huber-intro-1 please go ahead with the learning module huber-intro-2 that is also part of my swirl course swirl-it.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>An interactive introduction using swirl</span>"
    ]
  },
  {
    "objectID": "10_swirl.html#swirl-it-huber-intro-2",
    "href": "10_swirl.html#swirl-it-huber-intro-2",
    "title": "2  An interactive introduction using swirl",
    "section": "2.3 swirl-it: huber-intro-2",
    "text": "2.3 swirl-it: huber-intro-2\n\n\n\n\n\n\nClick to see the full content of the module\n\n\n\n\n\nWelcome to the second module. Again, if you find any errors or if you have suggestions for improvement, please let me know via stephan.huber@hs-fresenius.de .\nBefore you start working, you should set your working directory to where all your data and script files are or should be stored. Within RStudio you can go to ‘Session’&gt; ‘Set working directory’, or you can type in setwd(YOURPATH). Please do this now.\n\nsetwd(getwd())\n\nHint: Instead of clicking, you can also type setwd(“path”), where you replace “path” with the location of your folder, for example setwd(“D:/R/swirl”).\nR is an interpreter that uses a command line based environment. This means that you have to type commands, rather than use the mouse and menus. This has many advantages. Foremost, it is easy to get a full transcript of everything you did and you can replicate your work easy.\nAs already mentioned, all commands in R are functions where arguments come (or do not come) in round brackets after the function name.\nYou can store your workflow in files, the so-called scripts. These scripts have typically file names with the extension, e.g., foo.R .\nYou can open an editor window to edit these files by clicking ‘File’ and ‘New’. Try this. Under ‘File’ you also find the options ‘Open file…’, ‘Save’ and ‘Save as’. Alternatively, just type CTRL+SHIFT+N.\nYou can run (send to the Console window) part of the code by selecting lines and pressing CTRL+ENTER or click ‘Run’ in the editor window. If you do not select anything, R will run the line your cursor is on.\nYou can always run the whole script with the console command source, so e.g. for the script in the file foo.R you type source(‘foo.R’). You can also click ‘Run all’ in the editor window or type CTRL+SHIFT+S to run the whole script at once.\nMake a script called firstscript.R. Therefore, open the editor window with ‘File’ &gt; ‘New’. Type plot(rnorm(100)) in the script, save it as firstscript.R in the working directory. Then type source(\"firstscript.R\") on the command line.\n\nsource(\"firstscript.R\")\n\nRun your script again with source(\"firstscript.R\"). The plot will change because new numbers are generated.\n\nsource(\"firstscript.R\")\n\nHint: Type source(“firstscript.R”) again or type skip() if you are not interested.\nVectors were already introduced, but they can do more. Make a vector with numbers 1, 4, 6, 8, 10 and call it vec1.\nHint: Type vec1 &lt;- c(1,4,6,8,10).\n\nvec1 &lt;- c(1,4,6,8,10)\n\nElements in vectors can be addressed by standard [i] indexing. Select the 5th element of this vector by typing vec1[5].\n\nvec1[5]\n\nReplace the 3rd element with a new number by typing vec1[3]=12.\n\nvec1[3] &lt;- 12 \n\nAsk R what the new version is of vec1.\n\nvec1\n\nYou can also see the numbers of vec1 in the environment window. Make a new vector vec2 using the seq() (sequence) function by typing seq(from=0, to=1, by=0.25) and check its values in the environment window.\nHint: Type vec2 &lt;- seq(from=0, to=1, by=0.25).\n\nvec2 &lt;-seq(from=0, to=1, by=0.25) \n\nType sum(vec1).\n\nsum(vec1)\n\nThe function sum sums up the elements within a vector, leading to one number (a scalar). Now use + to add the two vectors.\nHint: Type vec1 + vec2.\n\nvec1+vec2\n\nIf you add two vectors of the same length, the first elements of both vectors are summed, and the second elements, etc., leading to a new vector of length 5 (just like in regular vector calculus).\nMatrices are nothing more than 2-dimensional vectors. To define a matrix, use the function matrix. Make a matrix with matrix(data=c(9,2,3,4,5,6),ncol=3) and call it mat.\nHint: Type mat &lt;- matrix(data=c(9,2,3,4,5,6),ncol=3) or type skip() if you are not interested.\n\nmat&lt;-matrix(data=c(9,2,3,4,5,6),ncol=3)\n\nThe third type of data structure treated here is the data frame. Time series are often ordered in data frames. A data frame is a matrix with names above the columns. This is nice, because you can call and use one of the columns without knowing in which position it is. Make a data frame with t = data.frame(x = c(11,12,14), y = c(19,20,21), z = c(10,9,7)).\n\nt &lt;- data.frame(x = c(11,12,14), y = c(19,20,21), z = c(10,9,7))\n\nAsk R what t is.\nHint: Type t or skip() if you are not interested.\n\nt\n\nThe data frame is called t and the columns have the names x, y and z. You can select one column by typing t$z. Try this.\n\nt$z\n\nAnother option is to type t[[\"z\"]]. Try this as well.\n\nt[[\"z\"]]\n\nCompute the mean of column z in data frame t.\nHint: Use function mean or type skip() if you are not interested.\n\nmean(t$z)\n\nIn the following question you will be asked to modify a script that will appear as soon as you move on from this question. When you have finished modifying the script, save your changes to the script and type submit() and the script will be evaluated. There will be some comments in the script that opens up. Be sure to read them!\nMake a script file which constructs three random normal vectors of length 100. Call these vectors x1, x2 and x3. Make a data frame called t with three columns (called a, b and c) containing respectively x1, x1+x2 and x1+x2+x3. Call plot(t) for this data frame. Then, save it and type submit() on the command line.\nHint: Type plot(rnorm(100)) in the script, save it and type submit() on the command line.\n\n# Text behind the #-sign is not evaluated as code by R. \n# This is useful, because it allows you to add comments explaining what the script does.\n\n# In this script, replace the ... with the appropriate commands.\n\n\nx1 = ...\nx2 = ...\nx3 = ...\nt = ...\nplot(...)\n\n\n\n\n\n\n\nResult\n\n\n\n\n\n\n# Text behind the #-sign is not evaluated as code by R. \n# This is useful, because it allows you to add comments explaining what the script does.\n\n# In this script, replace the ... with the appropriate commands.\n\nx1 = rnorm(100)\nx2 = rnorm(100)\nx3 = rnorm(100)\nt = data.frame(a=x1, b=x1+x2, c=x1+x2+x3)\nplot(t)\n\n\n\n\nDo you understand the results?\nAnother basic structure in R is a list. The main advantage of lists is that the columns (they are not really ordered in columns any more, but are more a collection of vectors) don’t have to be of the same length, unlike matrices and data frames. Make this list L &lt;- list(one=1, two=c(1,2), five=seq(0, 1, length=5)).\n\nL &lt;- list(one=1, two=c(1,2), five=seq(0, 1, length=5))\n\nThe list L has names and values. You can type L to see the contents.\n\nL\n\nL also appeared in the environment window. To find out what’s in the list, type names(L).\n\nnames(L)\n\nAdd 10 to the column called five.\nHint: Type L$five + 10\n\nL$five + 10\n\nPlotting is an important statistical activity. So it should not come as a surprise that R has many plotting facilities. Type plot(rnorm(100), type=\"l\", col=\"gold\").\nHint: The symbol between quotes after the type=, is the letter l, not the number 1. To see the result you can also just type skip().\n\nplot(rnorm(100), type=\"l\", col=\"gold\") \n\nHundred random numbers are plotted by connecting the points by lines in a gold color.\nAnother very simple example is the classical statistical histogram plot, generated by the simple command hist. Make a histogram of 100 random numbers.\nHint: Type hist(rnorm(100))\n\nhist(rnorm(100))\n\nThe script that opens up is the same as the script you made before, but with more plotting commands. Type submit() on the command line to run it (you don’t have to change anything yet).\nHint: Change plotting parameters in the script, save it and type submit() on the command line.\n\n# Text behind the #-sign is not evaluated as code by R. \n# This is useful, because it allows you to add comments explaining what the script does.\n\n# Make data frame\nx1 = rnorm(100)\nx2 = rnorm(100)\nx3 = rnorm(100)\nt = data.frame(a=x1, b=x1+x2, c=x1+x2+x3)\n\n# Plot data frame\nplot(t$a, type='l', ylim=range(t), lwd=3, col=rgb(1,0,0,0.3))\nlines(t$b, type='s', lwd=2, col=rgb(0.3,0.4,0.3,0.9))\npoints(t$c, pch=20, cex=4, col=rgb(0,0,1,0.3))\n\n# Note that with plot you get a new plot window while points and lines add to the previous plot.\n\nTry to find out by experimenting what the meaning is of rgb, the last argument of rgb, lwd, pch, cex. Type play() on the command line to experiment. Modify lines 11, 12 and 13 of the script by putting your cursor there and pressing CTRL+ENTER. When you are finished, type nxt() and then ?par.\nHint: Type ?par or type skip() if you are not interested.\n\n?par\n\nYou searched for par in the R help. This is a useful page to learn more about formatting plots. Google ‘R color chart’ for a pdf file with a wealth of color options.\nTo copy your plot to a document, go to the plots window, click the ‘Export’ button, choose the nicest width and height and click ‘Copy’ or ‘Save’.\nAfter having almost completed the second learning module, you are getting closer to become a nerd as you know…\n…that everything in R is stored in objects (values, vectors, matrices, lists, or data frames),\n…that you should always work in scripts and send code from scripts to the Console,\n…that you can do it if you don’t give up.\nPlease continue choosing another swirl learning module.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>An interactive introduction using swirl</span>"
    ]
  },
  {
    "objectID": "10_swirl.html#swirl-it-data-analytical-basics",
    "href": "10_swirl.html#swirl-it-data-analytical-basics",
    "title": "2  An interactive introduction using swirl",
    "section": "2.4 swirl-it: Data analytical basics",
    "text": "2.4 swirl-it: Data analytical basics\nIn my swirl modules huber-data-1, huber-data-2, and huber-data-3 I introduce some very basic statistical principles on how to analyse data.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>An interactive introduction using swirl</span>"
    ]
  },
  {
    "objectID": "10_swirl.html#swirl-it-the-tidyverse-package",
    "href": "10_swirl.html#swirl-it-the-tidyverse-package",
    "title": "2  An interactive introduction using swirl",
    "section": "2.5 swirl-it: The tidyverse package",
    "text": "2.5 swirl-it: The tidyverse package\nI compiled a short swirl module to introduce the tidyverse universe. This is a powerful collection of packages which I discuss later on. The learning module is also part of my swirl-it course.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>An interactive introduction using swirl</span>"
    ]
  },
  {
    "objectID": "10_swirl.html#other-swirl-modules",
    "href": "10_swirl.html#other-swirl-modules",
    "title": "2  An interactive introduction using swirl",
    "section": "2.6 Other swirl modules",
    "text": "2.6 Other swirl modules\nYou can also install some other courses. You find a list of courses here http://swirlstats.com/scn/index.html or here https://github.com/swirldev/swirl_courses.\nI recommend this one as it gives a general overview on very basic principles of R:\n\nlibrary(swirl)\ninstall_course_github(\"swirldev\", \"R_Programming_E\")\nswirl()\n\n\n\n\n\nIrizarry, R. A. (2022). Introduction to data science: Data analysis and prediction algorithms with R. Accessed January 30, 2023; CRC Press. https://rafalab.github.io/dsbook/",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>An interactive introduction using swirl</span>"
    ]
  },
  {
    "objectID": "22_script.html",
    "href": "22_script.html",
    "title": "3  Work with R scripts",
    "section": "",
    "text": "3.1 R Scripts: Why they are useful\nTyping functions into the console to run code may seem simple, but this interactive style has limitations:\nThat’s where having a transcript of all the code, which can be re-run and edited at any time, becomes useful. An R script is precisely that - a plain text file that contains code and comments and this comes with advantages:",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Work with R scripts</span>"
    ]
  },
  {
    "objectID": "22_script.html#r-scripts-why-they-are-useful",
    "href": "22_script.html#r-scripts-why-they-are-useful",
    "title": "3  Work with R scripts",
    "section": "",
    "text": "Typing commands one at a time can be cumbersome and time-consuming.\nIt’s hard to save your work effectively.\nGoing back to the beginning when you make a mistake is annoying.\nYou can’t leave notes for yourself.\nReusing and adapting analyses can be difficult.\nIt’s hard to do anything except the basics.\nSharing your work with others can be challenging.\n\n\n\nScripts provide a record of everything you did during your data analysis.\nYou can easily edit and re-run code in a script.\nScripts allow you to leave notes for yourself.\nScripts make it easy to reuse and adapt analyses.\nScripts allow you to do more complex analyses.\nScripts make it easy to share your work with others.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Work with R scripts</span>"
    ]
  },
  {
    "objectID": "22_script.html#generate-write-and-run-r-scripts",
    "href": "22_script.html#generate-write-and-run-r-scripts",
    "title": "3  Work with R scripts",
    "section": "3.2 Generate, write, and run R scripts",
    "text": "3.2 Generate, write, and run R scripts\nTo generate a script you can\n\nGo to the File menu, select New File and then choose R Script or\nUse the keyboard shortcut Ctrl+Shift+N (Windows) or Cmd+Shift+N (Mac) or\nType the following command in the Console:\n\n\nfile.create(\"hello.R\")\n\nIn the first two ways, a new R script window will open which can be edited and should be saved either by clicking on the File menu and selecting Save, clicking the disk icon, or by using the shortcut Ctrl+S (Windows) or Cmd+S (Mac). If you go for the third way, you need to open it manually.\nRegardless of your preferred way of generating a script, we can now start writing our first script:\n\nsetwd(\"/home/sthu/Dropbox/hsf/23-ss/ds/\")\nx &lt;- \"hello world\"\nprint(x)\n\nThen save the script using the menus (File &gt; Save) as hello.R.\nThe above lines of code do the following:\n\nsetwd() allows to set the working directory. If you are not familiar with file systems, please read section @ref(sec:navigation) in the appendix.\nWith the assignment operator &lt;- we create an object that stores the words “hello world” in an object entitled x. In the next section @ref(sec:assignmentoper) the assignment operator is further explained.\nWith the third input we print the content of the object x.\n\nSo how do we run the script? Assuming that the hello.R file has been saved to your working directory, then you can run the script using the following command:\n\nsource( \"hello.R\" )\n\nSuppose you saved the script in a sub-folder called of your working directory, then you need to run the script using the following command:\n\nsource(\"./scripts/hello.R\") \n\nJust note that the dot, ., means the current folder. Instead of using the source function, you can click on the source button in Rstudio.\nWith the character # you can write a comment in a script and R will simply ignore everything that follows in that line onwards.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Work with R scripts</span>"
    ]
  },
  {
    "objectID": "22_script.html#sec:assignmentoper",
    "href": "22_script.html#sec:assignmentoper",
    "title": "3  Work with R scripts",
    "section": "3.3 The assignment operator: <-",
    "text": "3.3 The assignment operator: &lt;-\nSuppose I’m trying to calculate how much money I’m going to make from this book. I agree, it is an unrealistic example but it will help you to understand R. Let’s assume I’m only going to sell 350 copies. To create a variable called sales and assigns a value to it, we need to use the assignment operator of R, which is &lt;- as follows:\n\nsales &lt;- 350\n\nWhen you hit enter, R doesn’t print out any output. If you are using Rstudio, and the environment panel you can see that something happened there, can you? It just gives you another command prompt. However, behind the scenes R has created a variable called sales and given it a value of 350. You can check that this has happened by asking R to print the variable on screen. And the simplest way to do that is to type the name of the variable and hit enter.\n\nsales\n\n[1] 350\n\n\nWorth a mentioning is the curious features of R that there are several different ways of making assignments. In addition to the &lt;- operator, we can also use -&gt; and =. If you want to use -&gt;, you might expect from just looking at the symbol you should write it like this:\n\n350 -&gt; sales\n\nHowever, it is common practice to use &lt;- and I recommend only to use this one because it is easier to read in scripts.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Work with R scripts</span>"
    ]
  },
  {
    "objectID": "22_script.html#doing-calculation-in-scripts",
    "href": "22_script.html#doing-calculation-in-scripts",
    "title": "3  Work with R scripts",
    "section": "3.4 Doing calculation in scripts",
    "text": "3.4 Doing calculation in scripts\nR can do any kind of arithmetic calculation with the arithmetic operators given in the table below. Using the assignment operator, R functions, and the features of a R script is easy and gives an idea how R works and how you should embrace the power of the programming language.\n\n\n\noperation\noperator\nexample input\nexample output\n\n\n\n\naddition\n+\n10+2\n12\n\n\nsubtraction\n-\n9-3\n6\n\n\nmultiplication\n*\n5*5\n25\n\n\ndivision\n/\n10/3\n3\n\n\npower\n^\n5^2\n25\n\n\n\nSo please copy and past the following lines of code into a R script of yours, try to run it on your PC, and try to understand it. Of course, you have to tweak the script a bit to make it run on your PC. For example, I doubt you have the same working directory that I decided to use.\n\n# Set working directory\nsetwd(\"~/Dropbox/hsf/23-ss/ds\")\n# Create a vector that contains the sales data\nsales_by_month &lt;- c(0, 100, 200, 50, 3, 4, 8, 0, 0, 0, 0, 0)\nsales_by_month\nsales_by_month[2]\nsales_by_month[4]\nfebruary_sales &lt;- sales_by_month[2]\nfebruary_sales\nsales_by_month[5] &lt;- 25 # added May sales data\nsales_by_month\n# Do I have 12 month?\nlength( x = sales_by_month )\n# Assume each unit costs 7 Euro, then the revenue is\nprice &lt;- 7\nrevenue &lt;- sales_by_month*price\nrevenue\n# To get statistics for daily revenue we define the number of days:\ndays_per_month &lt;- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n# Calculate the daily revenue\nrevenue_per_day &lt;- revenue/days_per_month\nrevenue_per_day \n# round number \nround(revenue_per_day) \n\nUse the “?” to search for the documentation of all functions used. In particular, do you understand how the function round() works? What arguments does the function contain? How can you manipulate the pre-defined arguments. For example, can you calculate the rounded revenue per day with two or four digits? Try it out!\n\n?round()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Work with R scripts</span>"
    ]
  },
  {
    "objectID": "22_script.html#sec:generics",
    "href": "22_script.html#sec:generics",
    "title": "3  Work with R scripts",
    "section": "3.5 User-defined functions",
    "text": "3.5 User-defined functions\nOne of the great strengths of R is the user’s ability to add functions. Sometimes there is a small task (or series of tasks) you need done and you find yourself having to repeat it multiple times. In these types of situations it can be helpful to create your own custom function. The structure of a function is given below:\n\nname_of_function &lt;- function(argument1, argument2) {\n    statements or code that does something\n    return(something)\n}\n\nFirst you give your function a name. Then you assign value to it, where the value is the function. When defining the function you will want to provide the list of arguments required (inputs and/or options to modify behavior of the function), and wrapped between curly brackets place the tasks that are being executed on/using those arguments. The argument(s) can be any type of object (like a scalar, a matrix, a dataframe, a vector, a logical, etc), and it’s not necessary to define what it is in any way. Finally, you can return the value of the object from the function, meaning pass the value of it into the global environment. The important idea behind functions is that objects that are created within the function are local to the environment of the function – they don’t exist outside of the function. Note, a function doesn’t require any arguments.\nLet’s try creating a simple example function. This function will take in a numeric value as input, and return the squared value.\n\nsquare_it &lt;- function(x) { \n   square &lt;- x * x\n   return(square)\n} \n\nNow, we can use the function as we would any other function. We type out the name of the function, and inside the parentheses we provide a numeric value x:\n\nsquare_it(5)\n\n[1] 25\n\n\nLet us get back to script with sales and try to calculate the monthly growth rates of revenue using a self-written function.\nThe formula of a growth rate is clear:\n\\[ g=\\left(\\frac{y_t-y_{t-1}}{y_{t-1}}\\right)\\cdot 100=\\left(\\frac{y_t}{y_{t-1}}-1\\right)\\cdot 100 \\]\nSo the challenge is to divide the value of revenue with the value of the previous period, a.k.a. the lagged value. Let us assume that the function lag() can give you exactly that value of a vector. Lets try it out:\n\nlag(revenue)\n\n [1]    0  700 1400  350  175   28   56    0    0    0    0    0\nattr(,\"tsp\")\n[1]  0 11  1\n\n(revenue/lag(revenue)-1)*100 \n\n [1] NaN   0   0   0   0   0   0 NaN NaN NaN NaN NaN\nattr(,\"tsp\")\n[1]  0 11  1\n\n\nUnfortunately, this does not work out. The lag() function does not work as we think it should. Well, the reason is simply that we are using the wrong function. The current lag() function is part of the stats package which is part of the package stats which is part of R base and is loaded automatically. The lag() function we aim to use stems from the dplyr package which we must install and load to be able to use it. So let’s do it:\n\n# check if the package is installed\nfind.package(\"dplyr\")\n\n[1] \"/home/sthu/R/x86_64-pc-linux-gnu-library/4.2/dplyr\"\n\n# I already installed the package so I can just load it\n# install.packages(\"dplyr\")\nlibrary(\"dplyr\")\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nThis message informs us that among other functions the lag() function is masked. That means that now the function of the newly loaded package is active. So, let’s try again:\n\nlag(revenue)\n\n [1]   NA    0  700 1400  350  175   28   56    0    0    0    0\n\n(revenue/lag(revenue)-1)*100 \n\n [1]   NA  Inf  100  -75  -50  -84  100 -100  NaN  NaN  NaN  NaN\n\n\nThat looks good now. And here is a way to calculate growth rates with a self-written function:\n\ngrowth_rate &lt;- function(x)(x/lag(x)-1)*100 \ngrowth_rate(revenue)\n\n [1]   NA  Inf  100  -75  -50  -84  100 -100  NaN  NaN  NaN  NaN\n\nsales_gr_rate &lt;- growth_rate(revenue)\nsales_gr_rate\n\n [1]   NA  Inf  100  -75  -50  -84  100 -100  NaN  NaN  NaN  NaN\n\n\nIn R, all functions are written by users, and it is not uncommon for two people to name their functions identically. In such cases, we must resolve the conflict by choosing which function to use. To use the lag function from the stats package, you can use the double colon operator :: like this stats::lag(arguments).",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Work with R scripts</span>"
    ]
  },
  {
    "objectID": "40_manage.html",
    "href": "40_manage.html",
    "title": "4  Manage data",
    "section": "",
    "text": "4.1 Import data",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Manage data</span>"
    ]
  },
  {
    "objectID": "40_manage.html#import-data",
    "href": "40_manage.html#import-data",
    "title": "4  Manage data",
    "section": "",
    "text": "4.1.1 Vectors and matrices\nWe already got known to the c() function which allows to combine multiple values into a vector or list. Here are some examples how you can use this function to create vectors and matrices:\n\n# defining multiple vectors using the colon operator `:`\nv_a &lt;- c(1:3)\nv_a\n\n[1] 1 2 3\n\nv_b &lt;- c(10:12)\nv_b\n\n[1] 10 11 12\n\n# creating matrix\nm_ab &lt;- matrix(c(v_a, v_b), ncol = 2)\nm_cbind &lt;- cbind(v_a, v_b)\nm_rbind &lt;- rbind(v_a, v_b)\n\n# print matrix\nprint(m_ab)\n\n     [,1] [,2]\n[1,]    1   10\n[2,]    2   11\n[3,]    3   12\n\nprint(m_cbind)\n\n     v_a v_b\n[1,]   1  10\n[2,]   2  11\n[3,]   3  12\n\nprint(m_rbind)\n\n    [,1] [,2] [,3]\nv_a    1    2    3\nv_b   10   11   12\n\n# defining row names and column names\nrown &lt;- c(\"row_1\", \"row_2\", \"row_3\")\ncoln &lt;- c(\"col_1\", \"col_2\")\n\n# creating matrix\nm_ab_label &lt;- matrix(m_ab, ncol = 2, byrow = FALSE, \n            dimnames = list(rown, coln))\n  \n# print matrix\nprint(m_ab_label)\n\n      col_1 col_2\nrow_1     1    10\nrow_2     2    11\nrow_3     3    12\n\n\nThe two most common formats to store and work with data in R are dataframe and tibble. Both formats store table-like structures of data in rows and columns. We will learn more on that in section Section 4.2.\n\n# convert the matrix into dataframe\ndf_ab=as.data.frame(m_ab_label)\ntbl_ab=data.frame(m_ab_label)\n\n\n\n4.1.2 Open RData files\nYou can save some of your objects with save() or all with save.image(). Load data that are stored in the .RData format can be loaded with load(). Please note, when you delete an object in R, you cannot recover it by clicking some Undo button. With rm() you remove objects from your workspace and with rm(list = ls()) you clear all objects from the workspace.\n\n\n4.1.3 Open datasets of packages\nThe datasets package contains numerous datasets that are commonly used in textbooks. To get an overview of all the datasets provided by the package, you can use the command help(package = datasets). One such dataset that we will be using further is the mtcars dataset:\n\nlibrary(\"datasets\")\nhead(mtcars, 3)\n\n               mpg cyl disp  hp drat    wt  qsec vs am gear carb\nMazda RX4     21.0   6  160 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710    22.8   4  108  93 3.85 2.320 18.61  1  1    4    1\n\n?mtcars  # data dictionary\n\n\n\n4.1.4 Import data using public APIs\nAn API which stands for application programming interface specifies how computers can exchange information. There are many R packages available that provide a convenient way to access data from various online sources directly within R using the API of webpages. In most cases, it’s better to download and import data within R using these tools than to navigate through the website’s interface. This ensures that changes can be made easily at any time and that the data is always up-to-date. For instance, wbstats provides access to World Bank data, eurostat allows users to access Eurostat databases, fredr makes it easy to obtain data from the Federal Reserve Economic Data (FRED) platform, which offers economic data for the United States, ecb provides an interface to the European Central Bank’s Statistical Data Warehouse, and the OECD package facilitates the extraction of data from the Organization for Economic Cooperation and Development (OECD). Here is an example using the wbstats package:\n\n# install.packages(\"wbstats\") \nlibrary(\"wbstats\")\n# GDP at market prices (current US$) for all available countries and regions\ndf_gdp &lt;- wb(indicator = \"NY.GDP.MKTP.CD\")\n\nWarning: `wb()` was deprecated in wbstats 1.0.0.\nℹ Please use `wb_data()` instead.\n\nhead(df_gdp, 3)\n\n  iso3c date        value    indicatorID         indicator iso2c\n2   AFE 2022 1.185138e+12 NY.GDP.MKTP.CD GDP (current US$)    ZH\n3   AFE 2021 1.086531e+12 NY.GDP.MKTP.CD GDP (current US$)    ZH\n4   AFE 2020 9.288802e+11 NY.GDP.MKTP.CD GDP (current US$)    ZH\n                      country\n2 Africa Eastern and Southern\n3 Africa Eastern and Southern\n4 Africa Eastern and Southern\n\nglimpse(df_gdp)\n\nRows: 13,198\nColumns: 7\n$ iso3c       &lt;chr&gt; \"AFE\", \"AFE\", \"AFE\", \"AFE\", \"AFE\", \"AFE\", \"AFE\", \"AFE\", \"A…\n$ date        &lt;chr&gt; \"2022\", \"2021\", \"2020\", \"2019\", \"2018\", \"2017\", \"2016\", \"2…\n$ value       &lt;dbl&gt; 1.185138e+12, 1.086531e+12, 9.288802e+11, 1.006191e+12, 1.…\n$ indicatorID &lt;chr&gt; \"NY.GDP.MKTP.CD\", \"NY.GDP.MKTP.CD\", \"NY.GDP.MKTP.CD\", \"NY.…\n$ indicator   &lt;chr&gt; \"GDP (current US$)\", \"GDP (current US$)\", \"GDP (current US…\n$ iso2c       &lt;chr&gt; \"ZH\", \"ZH\", \"ZH\", \"ZH\", \"ZH\", \"ZH\", \"ZH\", \"ZH\", \"ZH\", \"ZH\"…\n$ country     &lt;chr&gt; \"Africa Eastern and Southern\", \"Africa Eastern and Souther…\n\nsummary(df_gdp)\n\n    iso3c               date               value           indicatorID       \n Length:13198       Length:13198       Min.   :8.825e+06   Length:13198      \n Class :character   Class :character   1st Qu.:2.435e+09   Class :character  \n Mode  :character   Mode  :character   Median :1.786e+10   Mode  :character  \n                                       Mean   :1.224e+12                     \n                                       3rd Qu.:2.264e+11                     \n                                       Max.   :1.009e+14                     \n  indicator            iso2c             country         \n Length:13198       Length:13198       Length:13198      \n Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character  \n                                                         \n                                                         \n                                                         \n\n\n\n\n4.1.5 Import various file formats\n\n\n\nFigure 4.1: The logo of the packages readr, haven, and readxl\n\n\n\n\n\n\nRStudio provides convenient data import tools that can be accessed by clicking File &gt; Import Dataset. In addition, tidyverse offers packages for importing data in various formats. This cheatsheet, for example, is about the packages readr, readxl and googlesheets4. The first allows you to read data in various file formats, including fixed-width files like .csv and .tsv. The package readxl can read in Excel files, i.e., .xls and .xlsx file formats and googlesheets4 allows to read and write data from Google Sheets directly from R.\nFor more information, I recommend once again the second version book R for Data Science by Wickham & Grolemund (2023). In particular, check out the “Data tidying” section for importing CSV and TSV files, the “Spreadsheets” section for Excel files, the “Databases” section for retrieving data with SQL, the “Arrow” section for working with large datasets, and the “Web scraping” section for extracting data from web pages.\nFor an overview on packages for reading data that are provided by the tidyverse universe, see here.\n\n\n4.1.6 Examples\nFlat files such as CSV (Comma-Separated Values) are among the most common and straightforward data formats to work with.\n\ndata_csv &lt;- read_csv(\"https://github.com/hubchev/courses/raw/main/dta/classdata.csv\")\n\nExcel files, due to their wide use in business and research, require a specific approach specifying sheets and cell ranges.\n\nBWL_Zeitschriftenliste &lt;- \n  read_excel(\n  \"https://www.forschungsmonitoring.org/VWL_Zeitschriftenliste%202023.xlsx\",\n  sheet = \"SJR main\",\n  range = \"A1:D1977\"\n  )",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Manage data</span>"
    ]
  },
  {
    "objectID": "40_manage.html#sec-tidy",
    "href": "40_manage.html#sec-tidy",
    "title": "4  Manage data",
    "section": "4.2 Data",
    "text": "4.2 Data\n\n4.2.1 Data frames and tibbles\n\n\n\nFigure 4.2: The logos of the tidyr and tibble packages\n\n\n\n\n\n\nBoth data frames and tibbles are two of the most commonly used data structures in R for handling tabular data. A tibble actually is a data frame and you can use all functions that work with a data frame also with a tibble. However, a tibble has some additional features in printing and subsetting. Please note, data frames are provided by base R while tibbles are provided by the tidyverse package. This means that if you want to use tibbles you must load tidyverse. It turned out that it is helpful that a tibble has the folllowing features to simplify working with data: - Each vector is labeled by the variable name. - Variable names don’t have spaces and are not put in quotes. - All variables have the same length. - Each variable is of a single type (numeric, character, logical, or a categorical).\n\n\n4.2.2 Tidy data\nA popular quote from Hadley Wickham is that\n\n“tidy datasets are all alike, but every messy dataset is messy in its own way” (Hadley, 2014, p. 2).\n\nIt paraphrases the fact that it is a good idea to set rules how a dataset should structure its information to make it easier to work with the data. The tidyverse requires the data to be structured like is illustrated in Figure Figure 4.3. The rules are:\n\nEach variable is a column and vice versa.\nEach observation is a row and vice verse.\nEach value is a cell.\n\n\n\n\nFigure 4.3: Features of a tidy dataset: variables are columns, observations are rows, and values are cells\n\n\n\nSource: Wickham & Grolemund (2023). \n\n\n\nWhenever data follow that consistent structure, we speak of tidy data. The underlying uniformity of tidy data facilitates learning and using data manipulation tools.\nOne difference between data frames and tibbles is that dataframes store the row names. For example, take the mtcars dataset which consists of 32 different cars and the names of the cars are not stored as rownames:\n\nclass(mtcars) # mtcars is a data frame\n\n[1] \"data.frame\"\n\nrownames(mtcars) \n\n [1] \"Mazda RX4\"           \"Mazda RX4 Wag\"       \"Datsun 710\"         \n [4] \"Hornet 4 Drive\"      \"Hornet Sportabout\"   \"Valiant\"            \n [7] \"Duster 360\"          \"Merc 240D\"           \"Merc 230\"           \n[10] \"Merc 280\"            \"Merc 280C\"           \"Merc 450SE\"         \n[13] \"Merc 450SL\"          \"Merc 450SLC\"         \"Cadillac Fleetwood\" \n[16] \"Lincoln Continental\" \"Chrysler Imperial\"   \"Fiat 128\"           \n[19] \"Honda Civic\"         \"Toyota Corolla\"      \"Toyota Corona\"      \n[22] \"Dodge Challenger\"    \"AMC Javelin\"         \"Camaro Z28\"         \n[25] \"Pontiac Firebird\"    \"Fiat X1-9\"           \"Porsche 914-2\"      \n[28] \"Lotus Europa\"        \"Ford Pantera L\"      \"Ferrari Dino\"       \n[31] \"Maserati Bora\"       \"Volvo 142E\"         \n\n\nTo store mtcars as a tibble, we can use the as_tibble function:\n\ntbl_mtcars &lt;- as_tibble(mtcars)\nclass(tbl_mtcars) # check if it is a tibble now\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\nis_tibble(tbl_mtcars) # alternative check\n\n[1] TRUE\n\nhead(tbl_mtcars, 3)\n\n# A tibble: 3 × 11\n    mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1  21       6   160   110  3.9   2.62  16.5     0     1     4     4\n2  21       6   160   110  3.9   2.88  17.0     0     1     4     4\n3  22.8     4   108    93  3.85  2.32  18.6     1     1     4     1\n\n\nWhen we look at the data, we’ve lost the names of the cars. To store the these, you need to first add a column to the dataframe containing the rownames and then you can generate the tibble:\n\ntbl_mtcars &lt;- mtcars |&gt; \n  rownames_to_column(var = \"car\") |&gt;\n  as_tibble() \nclass(tbl_mtcars)\n\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n\nhead(tbl_mtcars, 3)\n\n# A tibble: 3 × 12\n  car            mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb\n  &lt;chr&gt;        &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 Mazda RX4     21       6   160   110  3.9   2.62  16.5     0     1     4     4\n2 Mazda RX4 W…  21       6   160   110  3.9   2.88  17.0     0     1     4     4\n3 Datsun 710    22.8     4   108    93  3.85  2.32  18.6     1     1     4     1\n\n\n\n\n4.2.3 Data types\nIn R, different data classes, or types of data exist:\n\nnumeric: can be any real number\ncharacter: strings and characters\ninteger: any whole numbers\nfactor: any categorical or qualitative variable with finite number of distinct outcomes\nlogical: contain either TRUE or FALSE\nDate: special format that describes time\n\nThe following example should exemplify these types of data:\n\ninteger_var &lt;- c(1, 2, 3, 4, 5)\nnumeric_var &lt;- c(1.1, 2.2, NA, 4.4, 5.5)\ncharacter_var &lt;- c(\"apple\", \"banana\", \"orange\", \"cherry\", \"grape\")\nfactor_var &lt;- factor(c(\"red\", \"yellow\", \"red\", \"blue\", \"green\"))\nlogical_var &lt;- c(TRUE, TRUE, TRUE, FALSE, TRUE)\ndate_var &lt;- as.Date(c(\"2022-01-01\", \"2022-02-01\", \"2022-03-01\", \"2022-04-01\", \"2022-05-01\"))\n\ndate_var[2] - date_var[5] # number of days in between these two dates\n\nTime difference of -89 days\n\n\nThere are some special data values used in R that needs further explanation:\n\nNA stands for not available or missing and is used to represent missing or undefined values.\nInf stands for infinity and is used to represent mathematical infinity, such as the result of dividing a non-zero number by zero. Can be positive or negative.\n\nNULL represents an empty or non-existent object. It is often used as a placeholder when a value or object is not yet available or when an object is intentionally removed.\nNaN stands for not a number and is used to represent an undefined or unrepresentable value, such as the result of taking the square root of a negative number. It can also occur as a result of certain arithmetic operations that are undefined. In contrast to NA it can only exist in numerical data.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Manage data</span>"
    ]
  },
  {
    "objectID": "40_manage.html#sec-pipeoperator",
    "href": "40_manage.html#sec-pipeoperator",
    "title": "4  Manage data",
    "section": "4.3 The pipe operator: |>",
    "text": "4.3 The pipe operator: |&gt;\nThe pipe operator, %\\&gt;%, comes from the magrittr package, which is also part of the tidyverse package. The pipe operator, |&gt;, has been part of base R since version 4.1.0. For most cases, these two operators are identical. The pipe operator is designed to help you write code in a way that is easier to read and understand. As R is a functional language, code often contains a lot of parentheses, ( and ). Nesting these parentheses together can be complex and make your R code hard to read and understand, which is where |&gt; comes to the rescue! It allows you to use the output of a function as the input of the next function. Consider the following example of code to explain the usage of the pipe operator:\n\n# create some data `x`\nx &lt;- c(1, 1.002, 1.004, .99, .99)\n# take the logarithm of `x`, \nlog_x &lt;- log(x)\n# compute the lagged and iterated differences (see `diff()`)\ngrowth_rate_x &lt;- diff(log_x)\ngrowth_rate_x\n\n[1]  0.001998003  0.001994019 -0.014042357  0.000000000\n\n# round the result (4 digit)\ngrowth_rate_x_round &lt;- round(growth_rate_x, 4)\ngrowth_rate_x_round \n\n[1]  0.002  0.002 -0.014  0.000\n\n\nThat is rather long and we actually don’t need objects log_x, growth_rate_x, and growth_rate_x_round. Well, then let us write that in a nested function:\n\nround(diff(log(x)), 4)\n\n[1]  0.002  0.002 -0.014  0.000\n\n\nThis is short but hard to read and understand. The solution is the “pipe”:\n\n# load one of these packages: `magrittr` or `tidyverse`\nlibrary(tidyverse)\n\n# Perform the same computations on `x` as above\nx |&gt; \n  log() |&gt;\n  diff() |&gt;\n  round(4)\n\n[1]  0.002  0.002 -0.014  0.000\n\n\nYou can read the |&gt; with “and then” because it takes the results of some function “and then” does something with that in the next. For example, reading out loud the following code would sound something like this:\n\nI take the mtcars data, and then\nI consider only cars with more than 4 cylinders, and then\nI group the cars by the number of cylinders the cars have, and then\nI summarize the data and show the means of miles per gallon (mpg) and horse powers (hp) by groups of cars that distinguish by their number of cylinders.\n\n\nmtcars |&gt; \n  filter(cyl&gt;4) |&gt; \n  group_by(cyl) |&gt; \n  summarise_at(c(\"mpg\", \"hp\"), mean)\n\n# A tibble: 2 × 3\n    cyl   mpg    hp\n  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     6  19.7  122.\n2     8  15.1  209.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Manage data</span>"
    ]
  },
  {
    "objectID": "40_manage.html#tools-to-manipulate-data",
    "href": "40_manage.html#tools-to-manipulate-data",
    "title": "4  Manage data",
    "section": "4.4 Tools to manipulate data",
    "text": "4.4 Tools to manipulate data\n\n4.4.1 The %in% operator\n%in% is used to subset a vector by comparison. Here’s an example:\n\nx &lt;- c(1, 3, 5, 7)\ny &lt;- c(2, 4, 6, 8)\nz &lt;- c(1, 2, 3)\n\nx %in% y  \n\n[1] FALSE FALSE FALSE FALSE\n\nx %in% z  \n\n[1]  TRUE  TRUE FALSE FALSE\n\nz %in% x\n\n[1]  TRUE FALSE  TRUE\n\n\nThe %in% operator can be used in combination with other functions like subset() and filter().\n\n\n4.4.2 Extract operators\nThe extract operators are used to retrieve data from objects in R. The operator may take four forms, including [], [[]], and $.\n[] allows to extract content from vector, lists, or data frames. For example,\n\na &lt;- mtcars[3, ]\nb &lt;- mtcars[\"Datsun 710\", ]\nidentical(a, b)\n\n[1] TRUE\n\na\n\n            mpg cyl disp hp drat   wt  qsec vs am gear carb\nDatsun 710 22.8   4  108 93 3.85 2.32 18.61  1  1    4    1\n\n\nextracts the third observation of the mtcars dataset, and\n\nc &lt;- mtcars[,\"cyl\"]\nd &lt;- mtcars[, 2]\nidentical(x, y)\n\n[1] FALSE\n\nc\n\n [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4\n\n\nextracts the variable/vector cyl.\nThe operators, [[]] and $ extract a single item from an object. It is used to refer to an element in a list or a column in a data frame. For example,\n\ne &lt;- mtcars$cyl\nf &lt;- mtcars[[\"cyl\"]]\nidentical(e, f)\n\n[1] TRUE\n\ne\n\n [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4\n\n\nwill return the values of the variable cyl from the data frame mtcars. Thus, x$y is actually just a short form for x[[“y”]].\n\n\n4.4.3 Logical operators\nThe extract operators can be combined with the logical operators (more precisely, I should call these binary relational operators) that are shown in Table 4.1.\n\n\n\nTable 4.1: Logical operators\n\n\n\n\n\n\n\n\n\n\n\noperation\noperator\nexample input\nanswer\n\n\n\n\nless than\n&lt;\n2 &lt; 3\nTRUE\n\n\nless than or equal to\n&lt;=\n2 &lt;= 2\nTRUE\n\n\ngreater than\n&gt;\n2 &gt; 3\nFALSE\n\n\ngreater than or equal to\n&gt;=\n2 &gt;= 2\nTRUE\n\n\nequal to\n==\n2 == 3\nFALSE\n\n\nnot equal to\n!=\n2 != 3\nTRUE\n\n\n\n\n\n\n\n\nnot\n!\n!(1==1)\nFALSE\n\n\nor\n\\(\\vert\\)\n(1==1) \\(\\vert\\) (2==3)\nTRUE\n\n\nand\n&\n(1==1) & (2==3)\nFALSE\n\n\n\n\n\n\nHere are some examples: Select rows where the number of cylinders is greater than or equal to 6:\n\nmtcars[mtcars$cyl &gt;= 6, ]\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\n\n\nSelect rows where the number of cylinders is either 4 or 6:\n\nmtcars[mtcars$cyl == 4 | mtcars$cyl == 6 , ]\n\n                mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4      21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nValiant        18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nMerc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280       19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C      17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nFiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nFiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFerrari Dino   19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nVolvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n\nSelect rows where the number of cylinders is 4 and the mpg is greater than 22:\n\nmtcars[mtcars$cyl == 4 & mtcars$mpg &gt; 22, ]\n\n                mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nDatsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nMerc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nFiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nFiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\n\n\nSelect rows where the weight is less than 3.5 or the number of gears is greater than 4:\n\nmtcars[mtcars$wt &lt; 3.5 | mtcars$gear &gt; 4, ]\n\n                   mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nMazda RX4         21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nDatsun 710        22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nHornet 4 Drive    21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nHornet Sportabout 18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant           18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nMerc 240D         24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230          22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nMerc 280          19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nMerc 280C         17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nFiat 128          32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic       30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla    33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona     21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nAMC Javelin       15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nFiat X1-9         27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2     26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa      30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFord Pantera L    15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nFerrari Dino      19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMaserati Bora     15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nVolvo 142E        21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n\nSelect rows where either mpg is greater than 25 or carb is less than 2, and the number of cylinders is either 4 or 8.\n\nmtcars[(mtcars$mpg &gt; 25 | mtcars$carb &lt; 2) & mtcars$cyl %in% c(4,8), ]\n\n                mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nDatsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nFiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nFiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\n\n\n\n\n4.4.4 If statements\nIn many cases, it’s necessary to execute certain code only when a particular condition is met. To achieve this, there are several conditional statements that can be used in code. These include:\n\nThe if statement: This is used to execute a block of code if a specified condition is true.\nThe else statement: This is used to execute a block of code if the same condition is false.\nThe else if statement: This is used to specify a new condition to test if the first condition is false.\nThe ifelse() function: This is used to check a condition for every element of a vector.\n\nThe following examples should exemplify how these statements work:\n\n# Example of if statement\nif (mean(mtcars$mpg) &gt; 20) {\n  print(\"The average miles per gallon is greater than 20.\")\n}\n\n[1] \"The average miles per gallon is greater than 20.\"\n\n# Example of if-else statement\nif (mean(mtcars$mpg) &gt; 20) {\n  print(\"The average miles per gallon is greater than 20.\")\n} else {\n  print(\"The average miles per gallon is less than or equal to 20.\")\n}\n\n[1] \"The average miles per gallon is greater than 20.\"\n\n# Example of if-else if statement\nif (mean(mtcars$mpg) &gt; 25) {\n  print(\"The average miles per gallon is greater than 25.\")\n} else if (mean(mtcars$mpg) &gt; 20) {\n  print(\"The average miles per gallon is between 20 and 25.\")\n} else {\n  print(\"The average miles per gallon is less than or equal to 20.\")\n}\n\n[1] \"The average miles per gallon is between 20 and 25.\"\n\n# Example of if_else function\nmtcars_2 &lt;- mtcars\nmtcars_2$mpg_category &lt;- ifelse(mtcars_2$mpg &gt; 20, \"High\", \"Low\")\n\nWhen you have a fixed number of cases and don’t want to use a long chain of if-else statements, you can use case_when();\n\nmtcars_cyl &lt;- mtcars %&gt;%\n  mutate(cyl_category = case_when(\n    cyl == 4 ~ \"four\",\n    cyl == 6 ~ \"six\",\n    cyl == 8 ~ \"eight\"\n  ))\n\nThe mutate() function is used to add the new variable, and case_when() is used to assign the values “four”, “six”, or “eight” to the new variable based on the number of cylinders in each car. Both functions are part of the dplyr package (see chapter Section 4.5).",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Manage data</span>"
    ]
  },
  {
    "objectID": "40_manage.html#sec-dplyr",
    "href": "40_manage.html#sec-dplyr",
    "title": "4  Manage data",
    "section": "4.5 Data manipulation with dplyr",
    "text": "4.5 Data manipulation with dplyr\n\n\n\nFigure 4.4: The logo of the dplyr package\n\n\n\n\n\n\nThe dplyr package is part of tidyverse and makes data manipulation easy:\n\nReorder the rows (arrange()).\nPick observations by their values (filter()).\nPick variables by their names (select()).\nCreate new variables with functions of existing variables (mutate()).\nCollapse many values down to a single summary (summarise()).\nRename variables (rename()).\n\nThese functions can all be used in conjunction with group_by() , which changes the scope of each function from operating on the entire dataset to operating on it group-by-group.\nAll functions work similarly:\n\nThe first argument is a data frame.\nThe subsequent arguments describe what to do with the data frame.\nThe result is a new data frame.\n\nHere are some examples that may help to understand these functions:\n\nlibrary(tidyverse)\n\n# load mtcars dataset\ndata(mtcars)\n\n# arrange rows by mpg in descending order\nmtcars |&gt; \n  arrange(desc(mpg))\n\n                     mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nToyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nFiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nLotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nFiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nMerc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nDatsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nMerc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nToyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nHornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1\nVolvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\nMazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4\nMazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4\nFerrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6\nMerc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4\nPontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2\nHornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2\nValiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1\nMerc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4\nMerc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3\nMerc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3\nFord Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4\nDodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2\nMerc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3\nAMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2\nMaserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8\nChrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4\nDuster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4\nCamaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4\nCadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4\nLincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4\n\n# filter rows where cyl = 4\nmtcars |&gt; \n  filter(cyl == 4)\n\n                mpg cyl  disp  hp drat    wt  qsec vs am gear carb\nDatsun 710     22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1\nMerc 240D      24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2\nMerc 230       22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2\nFiat 128       32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1\nHonda Civic    30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2\nToyota Corolla 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1\nToyota Corona  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1\nFiat X1-9      27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1\nPorsche 914-2  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2\nLotus Europa   30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2\nVolvo 142E     21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2\n\n# select columns mpg, cyl, and hp\nmtcars |&gt; \n  select(mpg, cyl, hp) |&gt; \n  head()\n\n                   mpg cyl  hp\nMazda RX4         21.0   6 110\nMazda RX4 Wag     21.0   6 110\nDatsun 710        22.8   4  93\nHornet 4 Drive    21.4   6 110\nHornet Sportabout 18.7   8 175\nValiant           18.1   6 105\n\n# select columns all variables except wt and hp\nmtcars |&gt; \n  select(-wt, -hp) |&gt; \n  head()\n\n                   mpg cyl disp drat  qsec vs am gear carb\nMazda RX4         21.0   6  160 3.90 16.46  0  1    4    4\nMazda RX4 Wag     21.0   6  160 3.90 17.02  0  1    4    4\nDatsun 710        22.8   4  108 3.85 18.61  1  1    4    1\nHornet 4 Drive    21.4   6  258 3.08 19.44  1  0    3    1\nHornet Sportabout 18.7   8  360 3.15 17.02  0  0    3    2\nValiant           18.1   6  225 2.76 20.22  1  0    3    1\n\n# select only variables starting with `c`\nmtcars |&gt; \n  select(starts_with(\"c\"))\n\n                    cyl carb\nMazda RX4             6    4\nMazda RX4 Wag         6    4\nDatsun 710            4    1\nHornet 4 Drive        6    1\nHornet Sportabout     8    2\nValiant               6    1\nDuster 360            8    4\nMerc 240D             4    2\nMerc 230              4    2\nMerc 280              6    4\nMerc 280C             6    4\nMerc 450SE            8    3\nMerc 450SL            8    3\nMerc 450SLC           8    3\nCadillac Fleetwood    8    4\nLincoln Continental   8    4\nChrysler Imperial     8    4\nFiat 128              4    1\nHonda Civic           4    2\nToyota Corolla        4    1\nToyota Corona         4    1\nDodge Challenger      8    2\nAMC Javelin           8    2\nCamaro Z28            8    4\nPontiac Firebird      8    2\nFiat X1-9             4    1\nPorsche 914-2         4    2\nLotus Europa          4    2\nFord Pantera L        8    4\nFerrari Dino          6    6\nMaserati Bora         8    8\nVolvo 142E            4    2\n\n# summarize avg mpg by number of cylinders\nmtcars |&gt; \n  group_by(cyl) |&gt; \n  summarize(avg_mpg = mean(mpg))\n\n# A tibble: 3 × 2\n    cyl avg_mpg\n  &lt;dbl&gt;   &lt;dbl&gt;\n1     4    26.7\n2     6    19.7\n3     8    15.1\n\n# create new column wt_kg, which is wt in kg\nmtcars |&gt; \n  select(wt) |&gt; \n  mutate(wt_kg = wt / 2.205) |&gt; \n  head()\n\n                     wt    wt_kg\nMazda RX4         2.620 1.188209\nMazda RX4 Wag     2.875 1.303855\nDatsun 710        2.320 1.052154\nHornet 4 Drive    3.215 1.458050\nHornet Sportabout 3.440 1.560091\nValiant           3.460 1.569161\n\n# Create a new variable by calculating hp divided by wt\nmtcars_new &lt;- mtcars |&gt; \n  select(wt, hp) |&gt; \n  mutate(hp_per_t = hp/wt) |&gt; \n  head()\n\n# Print the first few rows of the updated dataset\nhead(mtcars_new)\n\n                     wt  hp hp_per_t\nMazda RX4         2.620 110 41.98473\nMazda RX4 Wag     2.875 110 38.26087\nDatsun 710        2.320  93 40.08621\nHornet 4 Drive    3.215 110 34.21462\nHornet Sportabout 3.440 175 50.87209\nValiant           3.460 105 30.34682\n\n# Rename hp to horsepower\nmtcars |&gt; \n  rename(horsepower = hp) |&gt; \n  glimpse()\n\nRows: 32\nColumns: 11\n$ mpg        &lt;dbl&gt; 21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2,…\n$ cyl        &lt;dbl&gt; 6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6, 8, 8, 8, 8, 8, 8, 4, 4, 4,…\n$ disp       &lt;dbl&gt; 160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140…\n$ horsepower &lt;dbl&gt; 110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123, 180, 18…\n$ drat       &lt;dbl&gt; 3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92,…\n$ wt         &lt;dbl&gt; 2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.1…\n$ qsec       &lt;dbl&gt; 16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.…\n$ vs         &lt;dbl&gt; 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1,…\n$ am         &lt;dbl&gt; 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1,…\n$ gear       &lt;dbl&gt; 4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 4, 4, 4,…\n$ carb       &lt;dbl&gt; 4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4, 3, 3, 3, 4, 4, 4, 1, 2, 1,…",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Manage data</span>"
    ]
  },
  {
    "objectID": "40_manage.html#how-to-explore-a-dataset",
    "href": "40_manage.html#how-to-explore-a-dataset",
    "title": "4  Manage data",
    "section": "4.6 How to explore a dataset",
    "text": "4.6 How to explore a dataset\n\n# Creating dataframe\ndf &lt;- tibble(\n  integer_var, numeric_var, character_var, factor_var, logical_var, date_var,\n)\n\n# Overview of the data\nhead(df)\n\n# A tibble: 5 × 6\n  integer_var numeric_var character_var factor_var logical_var date_var  \n        &lt;dbl&gt;       &lt;dbl&gt; &lt;chr&gt;         &lt;fct&gt;      &lt;lgl&gt;       &lt;date&gt;    \n1           1         1.1 apple         red        TRUE        2022-01-01\n2           2         2.2 banana        yellow     TRUE        2022-02-01\n3           3        NA   orange        red        TRUE        2022-03-01\n4           4         4.4 cherry        blue       FALSE       2022-04-01\n5           5         5.5 grape         green      TRUE        2022-05-01\n\nsummary(df)\n\n  integer_var  numeric_var    character_var       factor_var logical_var    \n Min.   :1    Min.   :1.100   Length:5           blue  :1    Mode :logical  \n 1st Qu.:2    1st Qu.:1.925   Class :character   green :1    FALSE:1        \n Median :3    Median :3.300   Mode  :character   red   :2    TRUE :4        \n Mean   :3    Mean   :3.300                      yellow:1                   \n 3rd Qu.:4    3rd Qu.:4.675                                                 \n Max.   :5    Max.   :5.500                                                 \n              NA's   :1                                                     \n    date_var         \n Min.   :2022-01-01  \n 1st Qu.:2022-02-01  \n Median :2022-03-01  \n Mean   :2022-03-02  \n 3rd Qu.:2022-04-01  \n Max.   :2022-05-01  \n                     \n\nglimpse(df)\n\nRows: 5\nColumns: 6\n$ integer_var   &lt;dbl&gt; 1, 2, 3, 4, 5\n$ numeric_var   &lt;dbl&gt; 1.1, 2.2, NA, 4.4, 5.5\n$ character_var &lt;chr&gt; \"apple\", \"banana\", \"orange\", \"cherry\", \"grape\"\n$ factor_var    &lt;fct&gt; red, yellow, red, blue, green\n$ logical_var   &lt;lgl&gt; TRUE, TRUE, TRUE, FALSE, TRUE\n$ date_var      &lt;date&gt; 2022-01-01, 2022-02-01, 2022-03-01, 2022-04-01, 2022-05-…\n\n# look closer at variables\n\n# unique values\nunique(df$integer_var)\n\n[1] 1 2 3 4 5\n\nunique(df$factor_var)\n\n[1] red    yellow blue   green \nLevels: blue green red yellow\n\ntable(df$factor_var)\n\n\n  blue  green    red yellow \n     1      1      2      1 \n\nlength(unique(df$factor_var))\n\n[1] 4\n\n# distributions\ndf |&gt; count(factor_var)\n\n# A tibble: 4 × 2\n  factor_var     n\n  &lt;fct&gt;      &lt;int&gt;\n1 blue           1\n2 green          1\n3 red            2\n4 yellow         1\n\nprop.table(table(df$factor_var))\n\n\n  blue  green    red yellow \n   0.2    0.2    0.4    0.2 \n\ndf |&gt; \n  count(factor_var) |&gt; \n  mutate(prop = n / sum(n))\n\n# A tibble: 4 × 3\n  factor_var     n  prop\n  &lt;fct&gt;      &lt;int&gt; &lt;dbl&gt;\n1 blue           1   0.2\n2 green          1   0.2\n3 red            2   0.4\n4 yellow         1   0.2\n\naggregate(df$numeric_var, \n          by = list(fruit = df$factor_var), \n          mean)\n\n   fruit   x\n1   blue 4.4\n2  green 5.5\n3    red  NA\n4 yellow 2.2\n\n# --&gt; the mean of red cannot be calculated as there is a NA in it\n# Solution: exclude NAs from calculation:\naggregate(df$numeric_var, \n          by = list(fruit = df$factor_var), \n          mean,\n          na.rm = TRUE)\n\n   fruit   x\n1   blue 4.4\n2  green 5.5\n3    red 1.1\n4 yellow 2.2\n\n#install.packages(\"janitor\")\nrequire(\"janitor\")\n\nLoading required package: janitor\n\n\n\nAttaching package: 'janitor'\n\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\nmtcars |&gt; \n  tabyl(cyl) \n\n cyl  n percent\n   4 11 0.34375\n   6  7 0.21875\n   8 14 0.43750\n\nmtcars |&gt; \n  tabyl(cyl, hp) \n\n cyl 52 62 65 66 91 93 95 97 105 109 110 113 123 150 175 180 205 215 230 245\n   4  1  1  1  2  1  1  1  1   0   1   0   1   0   0   0   0   0   0   0   0\n   6  0  0  0  0  0  0  0  0   1   0   3   0   2   0   1   0   0   0   0   0\n   8  0  0  0  0  0  0  0  0   0   0   0   0   0   2   2   3   1   1   1   2\n 264 335\n   0   0\n   0   0\n   1   1\n\n\n\n\n\nFigure 4.1: The logo of the packages readr, haven, and readxl\nFigure 4.2: The logos of the tidyr and tibble packages\nFigure 4.3: Features of a tidy dataset: variables are columns, observations are rows, and values are cells\nFigure 4.4: The logo of the dplyr package\n\n\n\nHadley, W. (2014). Tidy data. Journal of Statistical Software, 59(10), 1–23.\n\n\nWickham, H., & Grolemund, G. (2023). R for data science (2e). https://r4ds.hadley.nz/",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Manage data</span>"
    ]
  },
  {
    "objectID": "50_graph.html",
    "href": "50_graph.html",
    "title": "5  Visualizing data",
    "section": "",
    "text": "Data visualization is an art. The purposes of visualizing data are manifold. You can emphasize facts, get known to data, detect anomalies, and communicate a large amount of information simply and intuitive. Whatever your goal is, thousand of appropriate ways exist to visualize data. Many decisions to take are simply a matter of taste. However, there are some conventions and guidelines that help you to make on average better decisions when designing a visualization:\n\nGood graphs are easy to understand and eye catching.\nGraphs can be misleading and manipulative and that is opposing to the ideas of science. Thus, be responsible and honest.\nMinimize colors and other attention-grabbing elements that are not directly related to the data of interest. Worldwide, there are approximately 300 million color blind people. In particular, red, green or blue light are problematic to color blind people. Thus, better rely on color schemes that are designed for colorblind people.\nDon’t truncate an axis or change the scaling within an axis just to make you your story more appealing. Show the full scale of the graph, then zoom to show the data of interest, if necessary.\nLabel and describe your chart sufficiently so that everybody can fully understand the content of the shown data set and statistics without having to study the notes of the graph for too long.\nDon’t do pie charts. They may look simple, but they’re tricky to get right and there are usually better alternatives. Humans are not very good at comparing the size of angles and as there’s no scale in pie plots, reading accurate values is difficult. Figure Figure 5.1 may proof this.\n\n\n\n\nFigure 5.1: Pie charts are problematic\n\n\n\nSource: https://en.wikipedia.org/wiki/Pie_chart\n\n\n\n\n\n\n\n\n\nMore tips\n\n\n\n\nData Visualization: Chart Dos and Don’ts (by Duke University)\nGraphs and Visualising Data by Oliver Kirchkamp. In particular, I highly recommend his handout (Kirchkamp, 2018). It discusses many pitfalls of visualizing data, instructs how to do good graphs, and he shows the corresponding R code of all graphs.\n\nThe R Graph Gallery and R CHARTS by R CODER shows graphs and the corresponding R code to replicate the graphs\nThe work of Edward Tufte and his book The Visual Display of Quantitative Information (Tufte, 2022) are classical readings.\n\n\n\nA great resource to learn how to visualize data is Wickham & Grolemund (2023). As I cannot do that any better, I refer to that source and refrain from writing section myself. It introduces the ggplot function which is part of the ggplot2 package which, in turn, is part of the tidyverse package. Thus, if you’ve installed and loaded tidyverse, you automatically have access to ggplot. Creating beautiful and informative graphs is easy with ggplot. To proof that claim, study the chapter (Data visualization) of Wickham & Grolemund (2023). Another good resource on modern data visualization is Kabacoff (2024).\n\n\n\n\n\n\nTo reap the best benefits from studying,\n\n\n\nI recommend to copy all the code that is shown in the book into a R script and try to run it on your PC. That is the best way to learn, understand, and create your own notes that may guide you later on. Whenever you see interesting code somewhere, try to run it on your PC. Moreover, I recommend the exercises of the book, they are challenging sometimes but to really understand code you need to run code yourself.\n\n\n\n\n\nFigure 5.1: Pie charts are problematic\n\n\n\nKabacoff, R. (2024). Modern data visualization with R. Chapman; Hall/CRC. https://rkabacoff.github.io/datavis/\n\n\nKirchkamp, O. (2018). Using graphs and visualising data.\n\n\nTufte, E. R. (2022). The visual display of quantitative information (2nd ed.). Graphics Press.\n\n\nWickham, H., & Grolemund, G. (2023). R for data science (2e). https://r4ds.hadley.nz/",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Visualizing data</span>"
    ]
  },
  {
    "objectID": "80_exercises.html",
    "href": "80_exercises.html",
    "title": "6  Collection of exercises",
    "section": "",
    "text": "6.1 Links to the R scripts with the solutions",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Collection of exercises</span>"
    ]
  },
  {
    "objectID": "80_exercises.html#links-to-the-r-scripts-with-the-solutions",
    "href": "80_exercises.html#links-to-the-r-scripts-with-the-solutions",
    "title": "6  Collection of exercises",
    "section": "",
    "text": "exe_duplicates.R\nexe_import_covid.R\nexe_genanddrop.R\nexe_base_pipe.R\nexe_subset.R\nexe_data_transformation.R\nexe_poser.R\nexe_datasauRus.R\nexe_convergence.R\nexe_un_gdp_ger_fra.R\nexe_hortacsu_figure_3.R\nexe_regress_lecture.R\nexe_calories.R\nexe_bundesliga.R\nexe_okun_solution.R\nexe_zipf_solution.R",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Collection of exercises</span>"
    ]
  },
  {
    "objectID": "80_exercises.html#links-to-the-output-of-the-scripts",
    "href": "80_exercises.html#links-to-the-output-of-the-scripts",
    "title": "6  Collection of exercises",
    "section": "6.2 Links to the output of the scripts",
    "text": "6.2 Links to the output of the scripts\nHere you find the output",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Collection of exercises</span>"
    ]
  },
  {
    "objectID": "80_exercises.html#exercise-generate-and-drop-variables",
    "href": "80_exercises.html#exercise-generate-and-drop-variables",
    "title": "6  Collection of exercises",
    "section": "EXERCISE: Generate and drop variables",
    "text": "EXERCISE: Generate and drop variables\nUse the mtcars dataset. It is part of the package datasets and can be called with\n\nmtcars\n\n\nCreate a new tibble called mtcars_new using the pipe operator |&gt;. Generate a new dummy variable called d_cyl_6to8 that takes the value 1 if the number of cylinders (cyl) is greater than 6, and 0 otherwise. Do all of this in a single pipe.\nGenerate a new dummy variable called posercar that takes a value of 1 if a car has more than 6 cylinders (cyl) and can drive less than 18 miles per gallon (mpg), and 0 otherwise. Add this variable to the tibble mtcars_new.\nRemove the variable d_cyl_6to8 from the data frame.\n\nPlease find solutions here.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Collection of exercises</span>"
    ]
  },
  {
    "objectID": "80_exercises.html#exercise-import-data",
    "href": "80_exercises.html#exercise-import-data",
    "title": "6  Collection of exercises",
    "section": "EXERCISE: Import data",
    "text": "EXERCISE: Import data\nTable 6.1 shows COVID for three states in Germany:\n\n\n\nTable 6.1: Covid cases and deaths till August 2022\n\n\n\n\n\n\n\n\n\n\n\nstate\nBavaria\nNorth Rhine-Westphalia\nBaden-Württemberg\n\n\n\n\ndeaths (in mio)\n4,92M\n5,32M\n3,69M\n\n\ncases\n24.111\n25.466\n16.145\n\n\n\n\n\n\nWrite down the code you would need to put into the R-console…\n\n…to store each of variables state and deaths in a vector.\n…to store both vectors in a data frame with the name df_covid.\n…to store both vectors in a tibble with the name tbl_covid.\n\nPlease find solution to the exercise here",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Collection of exercises</span>"
    ]
  },
  {
    "objectID": "80_exercises.html#exercise-base-r-or-pipe",
    "href": "80_exercises.html#exercise-base-r-or-pipe",
    "title": "6  Collection of exercises",
    "section": "EXERCISE: Base R or pipe",
    "text": "EXERCISE: Base R or pipe\n\nUsing the mtcars dataset, write code to create a new dataframe that includes only the rows where the number of cylinders is either 4 or 6, and the weight (wt) is less than 3.5.\n\nDo this in two different ways using:\n\nThe %in% operator and the pipe |&gt; .\nBase R without the pipe |&gt;.\n\nCompare the resulting dataframes using the identical() function.\n\nUsing the mtcars dataset, generate a logical variable that indicates with TRUE all cars with either 4 or 6 cylinders that wt is less than 3.5 and add this variable to a new dataset.\n\nPlease find solutions here.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Collection of exercises</span>"
    ]
  },
  {
    "objectID": "80_exercises.html#exercise-subsetting",
    "href": "80_exercises.html#exercise-subsetting",
    "title": "6  Collection of exercises",
    "section": "EXERCISE: Subsetting",
    "text": "EXERCISE: Subsetting\n\nCheck to see if you have the mtcars dataset by entering the command mtcars.\nSave the mtcars dataset in an object named cars.\nWhat class is cars?\nHow many observations (rows) and variables (columns) are in the mtcars dataset?\nRename mpg in cars to MPG. Use rename().\nConvert the column names of cars to all upper case. Use rename_all, and the toupper command.\nConvert the rownames of cars to a column called car using rownames_to_column.\nSubset the columns from cars that end in “p” and call it pvars using ends_with().\nCreate a subset cars that only contains the columns: wt, qsec, and hp and assign this object to carsSub. (Use select().)\nWhat are the dimensions of carsSub? (Use dim().)\nConvert the column names of carsSub to all upper case. Use rename_all(), and toupper() (or colnames()).\nSubset the rows of cars that get more than 20 miles per gallon (mpg) of fuel efficiency. How many are there? (Use filter().)\nSubset the rows that get less than 16 miles per gallon (mpg) of fuel efficiency and have more than 100 horsepower (hp). How many are there? (Use filter() and the pipe operator.)\nCreate a subset of the cars data that only contains the columns: wt, qsec, and hp for cars with 8 cylinders (cyl) and reassign this object to carsSub. What are the dimensions of this dataset? Do not use the pipe operator.\nCreate a subset of the cars data that only contains the columns: wt, qsec, and hp for cars with 8 cylinders (cyl) and reassign this object to carsSub2. Use the pipe operator.\nRe-order the rows of carsSub by weight (wt) in increasing order. (Use arrange().)\nCreate a new variable in carsSub called wt2, which is equal to wt^2, using mutate() and piping %&gt;%.\n\nPlease find solutions here.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Collection of exercises</span>"
    ]
  },
  {
    "objectID": "80_exercises.html#exercise-data-transformation",
    "href": "80_exercises.html#exercise-data-transformation",
    "title": "6  Collection of exercises",
    "section": "EXERCISE: Data transformation",
    "text": "EXERCISE: Data transformation\nPlease download and open the R-script you find here and try to answer the questions therein.\nSolutions to the questions are linked in the script.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Collection of exercises</span>"
    ]
  },
  {
    "objectID": "80_exercises.html#exercise-load-the-stata-dataset-auto-using-r",
    "href": "80_exercises.html#exercise-load-the-stata-dataset-auto-using-r",
    "title": "6  Collection of exercises",
    "section": "EXERCISE: Load the Stata dataset “auto” using R",
    "text": "EXERCISE: Load the Stata dataset “auto” using R\n\nCreate a scatter plot illustrating the relationship between the price and weight of a car. Provide a meaningful title for the graph and try to make it clear which car each observation corresponds to.\nSave this graph in the formats of .png and .pdf.\nCreate a variable “`lp100km’” that indicates the fuel consumption of an average car in liters per 100 kilometers. (Note: One gallon is approximately equal to 3.8 liters, and one mile is about 1.6 kilometers.)\nCreate a dummy variable “`larger6000’” that is equal to 1 if the price of a car is above $6000.\nNow, search for the “most unreasonable poser car” that costs no more than $6000. A “poser” car is defined as one that is expensive, has a large turning radius, consumes a lot of fuel, and is often defective (rep78 is low). For this purpose, create a metric indicator for each corresponding variable that indicates a value of 1 for the car that is the most unreasonable in that variable and 0 for the most reasonable car. All other cars should fall between 0 and 1.\n\nPlease find the solutions here.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Collection of exercises</span>"
    ]
  },
  {
    "objectID": "80_exercises.html#exercise-datasaurus",
    "href": "80_exercises.html#exercise-datasaurus",
    "title": "6  Collection of exercises",
    "section": "EXERCISE: DatasauRus",
    "text": "EXERCISE: DatasauRus\n\n\n\nFigure 6.1: The logo of the DatasauRus package\n\n\n\nSource: https://github.com/jumpingrivers/datasauRus_\n\n\n\n\nLoad the packages datasauRus and tidyverse. If necessary, install these packages.\nThe packagedatasauRus comes with a dataset in two different formats: datasaurus_dozen and datasaurus_dozen_wide. Store them as ds and ds_wide.\nOpen and read the R vignette of the datasauRus package. Also open the R documentation of the dataset datasaurus_dozen.\nExplore the dataset: What are the dimensions of this dataset? Look at the descriptive statistics.\nHow many unique values does the variable dataset of the tibble ds have? Hint: The function unique() return the unique values of a variable and the function length() returns the length of a vector, such as the unique elements.\nCompute the mean values of the x and y variables for each entry in dataset. Hint: Use the group_by() function to group the data by the appropriate column and then the summarise() function to calculate the mean.\nCompute the standard deviation, the correlation, and the median in the same way. Round the numbers.\nWhat can you conclude?\nPlot all datasets of ds. Hide the legend. Hint: Use the facet_wrap() and the theme() function.\nCreate a loop that generates separate scatter plots for each unique datatset of the tibble ds. Export each graph as a png file.\nWatch the video Animating the Datasaurus Dozen Dataset in R from The Data Digest on YouTube.\n\nPlease find the solutions here.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Collection of exercises</span>"
    ]
  },
  {
    "objectID": "80_exercises.html#exercise-convergence",
    "href": "80_exercises.html#exercise-convergence",
    "title": "6  Collection of exercises",
    "section": "EXERCISE: Convergence",
    "text": "EXERCISE: Convergence\nThe dataset convergence.dta, see https://github.com/hubchev/courses/blob/main/dta/convergence.dta, contains the per capita GDP of 1960 (gdppc60) and the average growth rate of GDP per capita between 1960 and 1995 (growth) for different countries (country), as well as 3 dummy variables indicating the belonging of a country to the region Asia (asia), Western Europe (weurope) or Africa (africa).\n\nSome countries are not assigned to a certain country group. Name the countries which are assign to be part of Western Europe, Africa or Asia. If you find countries that are members of the EU, assign them a ‘1’ in the variable weurope.\nCreate a table that shows the average GDP per capita for all available points in time. Group by Western European, Asian, African, and the remaining countries.\nCreate the growth rate of GDP per capita from 1960 to 1995 and call it gdpgrowth. (Note: The log value X minus the log value X of the previous period is approximately equal to the growth rate).\nCalculate the unconditional convergence of all countries by constructing a graph in which a scatterplot shows the GDP per capita growth rate between 1960 and 1995 (gdpgrowth) on the y-axis and the 1960 GDP per capita (gdppc60) on the x-axis. Add to the same graph the estimated linear relationship. You do not need to label the graph further, just two things: title the graph world and label the individual observations with the country names.\nCreate three graphs describing the same relationship for the sample of Western European, African and Asian countries. Title the graph accordingly with weurope, africa and asia.\nCombine the four graphs into one image. Discuss how an upward or downward sloping regression line can be interpreted.\nEstimate the relationships illustrated in the 4 graphs using the least squares method. Present the 4 estimation results in a table, indicating the significance level with stars. In addition, the Akaike information criterion, and the number of observations should be displayed in the table. Interpret the four estimation results regarding their significance.\nPut the data set into the so-called long format and calculate the GDP per capita growth rates for the available time points in the countries.\n\nPlease find solutions here.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Collection of exercises</span>"
    ]
  },
  {
    "objectID": "80_exercises.html#exercise-unemployment-and-gdp-in-germany-and-france",
    "href": "80_exercises.html#exercise-unemployment-and-gdp-in-germany-and-france",
    "title": "6  Collection of exercises",
    "section": "EXERCISE: Unemployment and GDP in Germany and France",
    "text": "EXERCISE: Unemployment and GDP in Germany and France\nThe following exercise was a former exam.\nPlease answer all (!) questions in an R script. Normal text should be written as comments, using the ‘#’ to comment out text. Make sure the script runs without errors before submitting it. Each task (starting with 1) is worth five points. You have a total of 120 minutes of editing time. Please do not forget to number your answers.\nWhen you are done with your work, save the R script, export the script to pdf format and upload the pdf file.\nSuppose you aim to empirically examine unemployment and GDP for Germany and France. The data set that we use in the following is ‘forest.Rdata’.\n\nWrite down your name, matriculation number, and date.\nSet your working directory.\n\n\nClear your global environment.\n\n\nInstall and load the following packages: ‘tidyverse’, ‘sjPlot’, and ‘ggpubr’\n\n\nDownload and load the data, respectively, with the following code:\n\n\nload(url(\"https://github.com/hubchev/courses/raw/main/dta/forest.Rdata\"))\n\nIf that is not working, you can also download the data from ILIAS, save it in your working directory and load it from there with:\n\n# load(\"forest.Rdata\")\n\n\nShow the first eight observations of the dataset ‘df’.\nShow the last observation of the dataset ‘df’.\nWhich type of data do we have here (Panel, cross-section,time series, …)? Name the variable(s) that are necessary to identify the observations in the dataset.\nExplain what the assignment operator in R is and what it is good for.\nWrite down the R code to store the number of observations and the number of variables that are in the dataset ‘df’. Name the object in which you store these numbers ‘observations_df’.\nIn the dataset ‘df’, rename the variable ‘country.x’ to ‘nation’ and the variable ‘date’ to ‘year’.\nExplain what the pipe operator in R is and what it is good for.\nFor the upcoming analysis you are only interested the following variables that are part of the dataframe ‘df’: nation, year, gdp, pop, gdppc, and unemployment. Drop all other variables from the dataframe ‘df’.\nCreate a variable that indicates the GDP per capita (‘gdp’ divided by ‘pop’). Name the variable ‘gdp_pc’. (Hint: If you fail here, use the variable ‘gdppc’ which is already in the dataset as a replacement for ‘gdp_pc’ in the following tasks.)\nFor the upcoming analysis you are only interested the following countries that are part of the dataframe ‘df’: Germany and France. Drop all other countries from the dataframe ‘df’.\nCreate a table showing the average unemployment rate and GDP per capita for Germany and France in the given years. Use the pipe operator. (Hint: See below for how your results should look like.)\n\n\n\n# A tibble: 2 × 3\n  nation  `mean(unemployment)` `mean(gdppc)`\n  &lt;chr&gt;                  &lt;dbl&gt;         &lt;dbl&gt;\n1 France                  9.75        34356.\n2 Germany                 7.22        36739.\n\n\n\nCreate a table showing the unemployment rate and GDP per capita for Germany and France in the year 2020. Use the pipe operator. (Hint: See below for how your results should look like.)\n\n\n\n# A tibble: 2 × 3\n  nation  `mean(unemployment)` `mean(gdppc)`\n  &lt;chr&gt;                  &lt;dbl&gt;         &lt;dbl&gt;\n1 France                  8.01        35786.\n2 Germany                 3.81        41315.\n\n\n\nCreate a table showing the highest unemployment rate and the highest GDP per capita for Germany and France during the given period. Use the pipe operator. (Hint: See below for how your results should look like.)\n\n\n\n# A tibble: 2 × 3\n  nation  `max(unemployment)` `max(gdppc)`\n  &lt;chr&gt;                 &lt;dbl&gt;        &lt;dbl&gt;\n1 France                 12.6       38912.\n2 Germany                11.2       43329.\n\n\n\nCalculate the standard deviation of the unemployment rate and GDP per capita for Germany and France in the given years. (Hint: See below for how your result should look like.)\n\n\n\n# A tibble: 2 × 3\n  nation  `sd(gdppc)` `sd(unemployment)`\n  &lt;chr&gt;         &lt;dbl&gt;              &lt;dbl&gt;\n1 France        2940.               1.58\n2 Germany       4015.               2.37\n\n\n\nIn statistics, the coefficient of variation (COV) is a standardized measure of dispersion. It is defined as the ratio of the standard deviation (\\(\\sigma\\)) to the mean (\\(\\mu\\)): \\(COV={\\frac {\\sigma }{\\mu }}\\). Write down the R code to calculate the coefficient of variation (COV) for the unemployment rate in Germany and France. (Hint: See below for what your result should should look like.)\n\n\n\n# A tibble: 2 × 4\n  nation  `sd(unemployment)` `mean(unemployment)`   cov\n  &lt;chr&gt;                &lt;dbl&gt;                &lt;dbl&gt; &lt;dbl&gt;\n1 France                1.58                 9.75 0.162\n2 Germany               2.37                 7.22 0.328\n\n\n\nWrite down the R code to calculate the coefficient of variation (COV) for the GDP per capita in Germany and France. (Hint: See below for what your result should look like.)\n\n\n\n# A tibble: 2 × 4\n  nation  `sd(gdppc)` `mean(gdppc)`    cov\n  &lt;chr&gt;         &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n1 France        2940.        34356. 0.0856\n2 Germany       4015.        36739. 0.109 \n\n\n\nCreate a chart (bar chart, line chart, or scatter plot) that shows the unemployment rate of Germany over the available years. Label the chart ‘Germany’ with ‘ggtitle(“Germany”)’. Please note that you may choose any type of graphical representation. (Hint: Below you can see one of many |&gt; of what your result may look like).\n\n\n\n\n\n\n\n\n\n\n\nand 23. (This task is worth 10 points) The following chart shows the simultaneous development of the unemployment rate and GDP per capita over time for France.\n\n\n\n\n\n\n\n\n\n\nSuppose you want to visualize the simultaneous evolution of the unemployment rate and GDP per capita over time for Germany as well.\nSuppose further that you have found the following lines of code that create the kind of chart you are looking for.\n\n# Data\nx &lt;- c(1, 2, 3, 4, 5, 4, 7, 8, 9)\ny &lt;- c(12, 16, 14, 18, 16, 13, 15, 20, 22)\nlabels &lt;- 1970:1978\n\n# Connected scatter plot with text\nplot(x, y, type = \"b\", xlab = \"Var 1\", ylab = \"Var 2\"); text(x + 0.4, y + 0.1, labels) \n\n\n\n\n\n\n\n\nUse these lines of code and customize them to create the co-movement visualization for Germany using the available ‘df’ data. The result should look something like this:\n\n\n\n\n\n\n\n\n\n\nInterpret the two graphs above, which show the simultaneous evolution of the unemployment rate and GDP per capita over time for Germany and France. What are your expectations regarding the correlation between the unemployment rate and GDP per capita variables? Can you see this expectation in the figures? Discuss.\n\nPlease find solutions here.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Collection of exercises</span>"
    ]
  },
  {
    "objectID": "80_exercises.html#exercise-import-data-and-write-a-report",
    "href": "80_exercises.html#exercise-import-data-and-write-a-report",
    "title": "6  Collection of exercises",
    "section": "EXERCISE: Import data and write a report",
    "text": "EXERCISE: Import data and write a report\nReproduce Figure 3 of Hortaçsu & Syverson (2015, p. 99) using R. Write a clear report about your work, i.e., document everything with a R script or a R Markdown file.\nHere are the required steps:\n\nGo to https://www.aeaweb.org/articles?id=10.1257/jep.29.4.89 and download the replication package from the OPENICPSR page. Please note, that you can download the replication package after you have registered for the platform.\nUnzip the replication package.\nIn the file diffusion_curves_figure.xlsx you find the required data. Import them to R.\nReproduce the plot using ggplot().\n\nPlease find solutions here.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Collection of exercises</span>"
    ]
  },
  {
    "objectID": "80_exercises.html#exercise-explain-the-weight",
    "href": "80_exercises.html#exercise-explain-the-weight",
    "title": "6  Collection of exercises",
    "section": "EXERCISE: Explain the weight",
    "text": "EXERCISE: Explain the weight\nIn the statistic course of WS 2020, I asked 23 students about their weight, height, sex, and number of siblings. I wonder how good the height can explain the weight of students. Examine with corelations and a regression analysis the association. Load the data as follows:\n\nlibrary(\"haven\")\nclassdata &lt;- read.csv(\"https://raw.githubusercontent.com/hubchev/courses/main/dta/classdata.csv\")\n\nA sketch of a solution is provided here.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Collection of exercises</span>"
    ]
  },
  {
    "objectID": "80_exercises.html#exercise-calories-and-weight",
    "href": "80_exercises.html#exercise-calories-and-weight",
    "title": "6  Collection of exercises",
    "section": "EXERCISE: Calories and weight",
    "text": "EXERCISE: Calories and weight\n\nWrite down your name, your matriculation number, and the date.\nSet your working directory.\nClear your global environment.\nLoad the following package: tidyverse\n\nThe following table stems from a survey carried out at the Campus of the German Sport University of Cologne at Opening Day (first day of the new semester) between 8:00am and 8:20am. The survey consists of 6 individuals with the following information:\n\n\n\nid\nsex\nage\nweight\ncalories\nsport\n\n\n\n\n1\nf\n21\n48\n1700\n60\n\n\n2\nf\n19\n55\n1800\n120\n\n\n3\nf\n23\n50\n2300\n180\n\n\n4\nm\n18\n71\n2000\n60\n\n\n5\nm\n20\n77\n2800\n240\n\n\n6\nm\n61\n85\n2500\n30\n\n\n\nData Description:\n\nid: Variable with an anonymized identifier for each participant.\nsex: Gender, i.e., the participants replied to be either male (m) or female (f).\nage: The age in years of the participants at the time of the survey.\nweight: Number of kg the participants pretended to weight.\ncalories: Estimate of the participants on their average daily consumption of calories.\nsport: Estimate of the participants on their average daily time that they spend on doing sports (measured in minutes).\n\n\nWhich type of data do we have here? (Panel data, repeated cross-sectional data, cross-sectional data, time Series data)\nStore each of the five variables in a vector and put all five variables into a dataframe with the title df. If you fail here, read in the data using this line of code:\n\n\ndf &lt;- read_csv(\"https://raw.githubusercontent.com/hubchev/courses/main/dta/df-calories.csv\")\n\nRows: 6 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): sex\ndbl (4): age, weight, calories, sport\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nShow for all numerical variables the summary statistics including the mean, median, minimum, and the maximum.\nShow for all numerical variables the summary statistics including the mean and the standard deviation, separated by male and female. Use therefore the pipe operator.\nSuppose you want to analyze the general impact of average calories consumption per day on the weight. Discuss if the sample design is appropriate to draw conclusions on the population. What may cause some bias in the data? Discuss possibilities to improve the sampling and the survey, respectively.\nThe following plot visualizes the two variables weight and calories. Discuss what can be improved in the graphical visualization.\n\n\n\nWeight vs. Calories\n\n\n\n\nMake a scatterplot matrix containing all numerical variables.\nCalculate the Pearson Correlation Coefficient of the two variables\n\ncalories and sport\nweight and calories\n\nMake a scatterplot with weight in the y-axis and calories on the x-axis. Additionally, the plot should contain a linear fit and the points should be labeled with the sex just like in the figure shown above.\nEstimate the following regression specification using the OLS method: [weight_i=_0+_1 calories_i+ _i]\n\nShow a summary of the estimates that look like the following:\n\n\n\nCall:\nlm(formula = weight ~ calories, data = df)\n\nResiduals:\n     1      2      3      4      5      6 \n-5.490 -1.182 -6.640  9.435 -6.099  9.976 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)  \n(Intercept)  7.730275  20.197867   0.383   0.7214  \ncalories     0.026917   0.009107   2.956   0.0417 *\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 8.68 on 4 degrees of freedom\nMultiple R-squared:  0.6859,    Adjusted R-squared:  0.6074 \nF-statistic: 8.735 on 1 and 4 DF,  p-value: 0.04174\n\n\n\nInterpret the results. In particular, interpret how many kg the estimated weight increases—on average and ceteris paribus—if calories increase by 100 calories. Additionally, discuss the statistical properties of the estimated coefficient \\(\\hat{\\beta_1}\\) and the meaning of the Adjusted R-squared.\nOLS estimates can suffer from omitted variable bias. State the two conditions that need to be fulfilled for omitted bias to occur.\nDiscuss potential confounding variables that may cause omitted variable bias. Given the dataset above how can some of the confounding variables be controlled for?\n\nSolutions are provided here.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Collection of exercises</span>"
    ]
  },
  {
    "objectID": "80_exercises.html#exercise-bundesliga",
    "href": "80_exercises.html#exercise-bundesliga",
    "title": "6  Collection of exercises",
    "section": "EXERCISE: Bundesliga",
    "text": "EXERCISE: Bundesliga\nOpen the script that you find here and work on the following tasks:\n\nSet your working directory.\nClear th environment.\nInstall and load the bundesligR and tidyverse.\nRead in the data bundesligR as a tibble.\nReplace “Bor. Moenchengladbach” with “Borussia Moenchengladbach.”\nCheck for the data class.\nView the data.\nGlimpse on the data.\nShow the first and last observations.\nShow summary statistics to all variables.\nHow many teams have played in the league over the years?\nWhich teams have played Bundesliga so far?\nHow many teams have played Bundesliga?\nHow often has each team played in the Bundesliga?\nShow summary statistics of variable Season only.\nShow summary statistics of all numeric variables (Team is a character).\nWhat is the highest number of points ever received by a team? Show only the name of the club with the highest number of points ever received.\nCreate a new tibble using liga removing the variable Pts_pre_95 from the data.\nCreate a new tibble using liga renaming W, D, and L to Win, Draw, and Loss. Additionally rename GF, GA, GD to Goals_shot, Goals_received, Goal_difference.\nCreate a new tibble using liga without the variable Pts_pre_95 and only observations before the year 1996.\nRemove the three tibbles just created from the environment.\nRename all variables of liga to lowercase and store it as dfb.\nShow the winner and the runner up after the year 2010. Additionally show the points received.\nCreate a variable that counts how often a team was ranked first.\nHow often has each team played in the Bundesliga?\nMake a ranking that shows which team has played the Bundesliga most often.\nAdd a variable to dfb that contains the number of appearances of a team in the league.\nCreate a number that indicates how often a team has played Bundesliga in a given year.\nMake a ranking with the number of titles of all teams that ever won the league.\nCreate a numeric identifying variable for each team.\nWhen a team is in the league, what is the probability that it wins the league?\nMake a scatterplot with points on the y-axis and position on the x-axis.\nMake a scatterplot with points on the y-axis and position on the x-axis. Additionally, only consider seasons with 18 teams and add lines that make clear how many points you needed to be placed in between rank 2 and 15.\nRemove all objects from the environment except dfb and liga.\nIn Figure @ref(fig:fckpic), the ranking history of 1. FC Kaiserslautern is shown. Replicate that plot.\n\n\n\n\n\nRanking history: 1. FC Kaiserslautern\n\n\n\n\n\n\nIn Figure @ref(fig:efzplot), I made the graph a bit nicer. Can you spot all differences and can you guess what the dashed line and the triangles mean? How could the visualization be improved further? Replicate the plot.\n\n\n\n\n\nRanking history: 1. FC Köln\n\n\n\n\n\n\nTry to make the ranking history for each club ever played the league and export the graph as a png file.\n\nSolutions are provided here.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Collection of exercises</span>"
    ]
  },
  {
    "objectID": "80_exercises.html#exercise-okuns-law",
    "href": "80_exercises.html#exercise-okuns-law",
    "title": "6  Collection of exercises",
    "section": "EXERCISE: Okun’s Law",
    "text": "EXERCISE: Okun’s Law\nSuppose you aim to empirically examine unemployment and GDP for Germany and France. The data set that we use in the following is ‘forest.Rdata’ and should already been known to you from the lecture.\n\nWrite down your name, matriculation number, and date.\nSet your working directory.\n\n\nClear your global environment.\n\n\nInstall and load the following packages: ‘tidyverse’, ‘sjPlot’, and ‘ggpubr’\n\n\nDownload and load the data, respectively, with the following code:\n\n\nload(url(\"https://github.com/hubchev/courses/raw/main/dta/forest.Rdata\"))\n\nIf that is not working, you can also download the data from ILIAS, save it in your working directory and load it from there with:\nload(\"forest.Rdata\")\n\nShow the first eight observations of the dataset ‘df’.\nShow the last observation of the dataset ‘df’.\nWhich type of data do we have here (Panel, cross-section,time series, …)? Name the variable(s) that are necessary to identify the observations in the dataset.\nExplain what the assignment operator in R is and what it is good for.\nWrite down the R code to store the number of observations and the number of variables that are in the dataset ‘df’. Name the object in which you store these numbers ‘observations_df’.\nIn the dataset ‘df’, rename the variable ‘country.x’ to ‘nation’ and the variable ‘date’ to ‘year’.\nExplain what the pipe operator in R is and what it is good for.\nFor the upcoming analysis you are only interested the following variables that are part of the dataframe ‘df’: nation, year, gdp, pop, gdppc, and unemployment. Drop all other variables from the dataframe ‘df’.\nCreate a variable that indicates the GDP per capita (‘gdp’ divided by ‘pop’). Name the variable ‘gdp_pc’. (Hint: If you fail here, use the variable ‘gdppc’ which is already in the dataset as a replacement for ‘gdp_pc’ in the following tasks.)\nFor the upcoming analysis you are only interested the following countries that are part of the dataframe ‘df’: Germany and France. Drop all other countries from the dataframe ‘df’.\nCreate a table showing the average unemployment rate and GDP per capita for Germany and France in the given years. Use the pipe operator. (Hint: See below for how your results should look like.)\n\n\n\n# A tibble: 2 × 3\n  nation  `mean(unemployment)` `mean(gdppc)`\n  &lt;chr&gt;                  &lt;dbl&gt;         &lt;dbl&gt;\n1 France                  9.75        34356.\n2 Germany                 7.22        36739.\n\n\n\nCreate a table showing the unemployment rate and GDP per capita for Germany and France in the year 2020. Use the pipe operator. (Hint: See below for how your results should look like.)\n\n\n\n# A tibble: 2 × 3\n  nation  `mean(unemployment)` `mean(gdppc)`\n  &lt;chr&gt;                  &lt;dbl&gt;         &lt;dbl&gt;\n1 France                  8.01        35786.\n2 Germany                 3.81        41315.\n\n\n\nCreate a table showing the highest unemployment rate and the highest GDP per capita for Germany and France during the given period. Use the pipe operator. (Hint: See below for how your results should look like.)\n\n\n\n# A tibble: 2 × 3\n  nation  `max(unemployment)` `max(gdppc)`\n  &lt;chr&gt;                 &lt;dbl&gt;        &lt;dbl&gt;\n1 France                 12.6       38912.\n2 Germany                11.2       43329.\n\n\n\nCalculate the standard deviation of the unemployment rate and GDP per capita for Germany and France in the given years. (Hint: See below for how your result should look like.)\n\n\n\n# A tibble: 2 × 3\n  nation  `sd(gdppc)` `sd(unemployment)`\n  &lt;chr&gt;         &lt;dbl&gt;              &lt;dbl&gt;\n1 France        2940.               1.58\n2 Germany       4015.               2.37\n\n\n\nIn statistics, the coefficient of variation (COV) is a standardized measure of dispersion. It is defined as the ratio of the standard deviation (\\(\\sigma\\)) to the mean (\\(\\mu\\)): \\(COV={\\frac {\\sigma }{\\mu }}\\). Write down the R code to calculate the coefficient of variation (COV) for the unemployment rate in Germany and France. (Hint: See below for what your result should should look like.)\n\n\n\n# A tibble: 2 × 4\n  nation  `sd(unemployment)` `mean(unemployment)`   cov\n  &lt;chr&gt;                &lt;dbl&gt;                &lt;dbl&gt; &lt;dbl&gt;\n1 France                1.58                 9.75 0.162\n2 Germany               2.37                 7.22 0.328\n\n\n\nWrite down the R code to calculate the coefficient of variation (COV) for the GDP per capita in Germany and France. (Hint: See below for what your result should should look like.)\n\nlook like.)\n\n\n# A tibble: 2 × 4\n  nation  `sd(gdppc)` `mean(gdppc)`    cov\n  &lt;chr&gt;         &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n1 France        2940.        34356. 0.0856\n2 Germany       4015.        36739. 0.109 \n\n\n\nCreate a chart (bar chart, line chart, or scatter plot) that shows the unemployment rate of Germany over the available years. Label the chart ‘Germany’ with ‘ggtitle(“Germany”)’. Please note that you may choose any type of graphical representation. (Hint: Below you can see one of many possible examples of what your result may look like).\n\n\n\n\n\n\n\n\n\n\n\nand 23. (This task is worth 10 points) The following chart shows the simultaneous development of the unemployment rate and GDP per capita over time for France.\n\n\n\n\n\n\n\n\n\n\nSuppose you want to visualize the simultaneous evolution of the unemployment rate and GDP per capita over time for Germany as well.\nSuppose further that you have found the following lines of code that create the kind of chart you are looking for.\n\n# Data\nx &lt;- c(1, 2, 3, 4, 5, 4, 7, 8, 9)\ny &lt;- c(12, 16, 14, 18, 16, 13, 15, 20, 22)\nlabels &lt;- 1970:1978\n\n# Connected scatter plot with text\nplot(x, y, type = \"b\", xlab = \"Var 1\", ylab = \"Var 2\"); text(x + 0.4, y + 0.1, labels) \n\n\n\n\n\n\n\n\nUse these lines of code and customize them to create the co-movement visualization for Germany using the available ‘df’ data. The result should look something like this:\n\n\n\n\n\n\n\n\n\n\nInterpret the two graphs above, which show the simultaneous evolution of the unemployment rate and GDP per capita over time for Germany and France. What are your expectations regarding the correlation between the unemployment rate and GDP per capita variables? Can you see this expectation in the figures? Discuss.\n\nSolutions are provided here.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Collection of exercises</span>"
    ]
  },
  {
    "objectID": "80_exercises.html#exercise-names-and-duplicates",
    "href": "80_exercises.html#exercise-names-and-duplicates",
    "title": "6  Collection of exercises",
    "section": "EXERCISE: Names and duplicates",
    "text": "EXERCISE: Names and duplicates\n\nLoad the required packages (pacman, tidyverse, janitor, babynames, stringr).\nLoad the dataset from the URL: https://github.com/hubchev/courses/raw/main/dta/df_names.RData. Make yourself familiar with the data.\nAfter loading the dataset, remove all objects except df_2022 and df_2022_error.\nReorder the data using the relocate function so that surname, name, and age appear first. Save the changed data in a tibble called df.\nSort the data according to surname, name, and age.\nMake a variable named born that contains the year of birth. How is the born variable calculated?\nCreate a new variable named id that identifies each person by surname, name, and their birth year (born). Why is this identifier useful?\nInvestigate how the data is identified. Are there any duplicates? If so, can you think of strategies to identify and how to deal with these duplicates.\nUnload the packages used in the script. Why is unloading packages considered good practice?\n\nSolutions are provided here.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Collection of exercises</span>"
    ]
  },
  {
    "objectID": "80_exercises.html#exercise-zipfs-law",
    "href": "80_exercises.html#exercise-zipfs-law",
    "title": "6  Collection of exercises",
    "section": "EXERCISE: Zipf’s law",
    "text": "EXERCISE: Zipf’s law\nThe data under investigation includes population information for various German cities, identified by the variable stadt, spanning the years 1970, 1987, and 2010. The variable status provides details about the legislative status of the cities, and the variable state (Bundesland) indicates the state in which each respective city is situated.\n\nPreamble\n\nSet your working directory.\n\n\n\nLoading required package: pacman\n\n\n\nClear your global environment.\n\n\nInstall and load the following packages: ‘tidyverse’, ‘haven’, and ‘janitor’.\n\n\n\nRead in, inspect, and clean the data\n\nDownload and load the data, respectively, with the following code:\n\n\ndf &lt;- read_dta(\n  \"https://github.com/hubchev/courses/raw/main/dta/city.dta\", \n  encoding=\"latin1\") |&gt; \n  as_tibble()\n\nIf that is not working, you can also download the data from ILIAS, save it in your working directory and load it from there with:\nload(\"city.RData\")\n\nShow the first six and the last six observations of the dataset ‘df’.\nHow many observations (rows) and variables (columns) are in the dataset?\nShow for all numerical variables the summary statistics including the mean, median, minimum, and the maximum.\nRename the variable stadt to city.\nRemove the variables pop1970 and pop1987.\nReplicate the following table which contains some summary statistics.\n\n\n\n# A tibble: 17 × 3\n   state                  `mean(pop2011)` `sum(pop2011)`\n   &lt;chr&gt;                            &lt;dbl&gt;          &lt;dbl&gt;\n 1 Baden-Wrttemberg                 7580            7580\n 2 Baden-Württemberg               23680.        7837917\n 3 Bayern                          23996.        7558677\n 4 Berlin                        3292365         3292365\n 5 Brandenburg                     18472.        1865632\n 6 Bremen                         325432.         650863\n 7 Hamburg                       1706696         1706696\n 8 Hessen                          22996.        5036121\n 9 Mecklenburg-Vorpommern          27034.         811005\n10 Niedersachsen                   24107.        6219515\n11 Nordrhein-Westfalen             47465.       18036727\n12 Rheinland-Pfalz                 25644.        1871995\n13 Saarland                           NA              NA\n14 Sachsen                         27788.        2973351\n15 Sachsen-Anhalt                  21212.        1993915\n16 Schleswig-Holstein              24157.        1739269\n17 Th_ringen                       29192.        1167692\n\n\n\nThe states “Baden-Wrttemberg” and “Th_ringen” are falsely pronounced. Correct the names and regenerate the summary statistics table presented above. Your result should look like this:\n\n\n\n# A tibble: 16 × 3\n   state                  `mean(pop2011)` `sum(pop2011)`\n   &lt;chr&gt;                            &lt;dbl&gt;          &lt;dbl&gt;\n 1 Baden-Württemberg               23631.        7845497\n 2 Bayern                          23996.        7558677\n 3 Berlin                        3292365         3292365\n 4 Brandenburg                     18472.        1865632\n 5 Bremen                         325432.         650863\n 6 Hamburg                       1706696         1706696\n 7 Hessen                          22996.        5036121\n 8 Mecklenburg-Vorpommern          27034.         811005\n 9 Niedersachsen                   24107.        6219515\n10 Nordrhein-Westfalen             47465.       18036727\n11 Rheinland-Pfalz                 25644.        1871995\n12 Saarland                           NA              NA\n13 Sachsen                         27788.        2973351\n14 Sachsen-Anhalt                  21212.        1993915\n15 Schleswig-Holstein              24157.        1739269\n16 Thüringen                       29192.        1167692\n\n\n\nTo investigate the reason for observing only NAs for Saarland, examine all cities within Saarland. Therefore, please display all observations for cities in Saarland in the Console, as illustrated below.\n\n\n\n# A tibble: 47 × 5\n   city                status  state    pop2011 rankX\n   &lt;chr&gt;               &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt;\n 1 Perl                Commune Saarland    7775  2003\n 2 Freisen             Commune Saarland    8270  1894\n 3 Großrosseln         Commune Saarland    8403  1868\n 4 Nonnweiler          Commune Saarland    8844  1775\n 5 Nalbach             Commune Saarland    9302  1678\n 6 Wallerfangen        Commune Saarland    9542  1642\n 7 Kirkel              Commune Saarland   10058  1541\n 8 Merchweiler         Commune Saarland   10219  1515\n 9 Nohfelden           Commune Saarland   10247  1511\n10 Friedrichsthal      City    Saarland   10409  1489\n11 Marpingen           Commune Saarland   10590  1461\n12 Mandelbachtal       Commune Saarland   11107  1390\n13 Kleinblittersdorf   Commune Saarland   11396  1354\n14 Überherrn           Commune Saarland   11655  1317\n15 Mettlach            Commune Saarland   12180  1241\n16 Tholey              Commune Saarland   12385  1217\n17 Saarwellingen       Commune Saarland   13348  1104\n18 Quierschied         Commune Saarland   13506  1088\n19 Spiesen-Elversberg  Commune Saarland   13509  1086\n20 Rehlingen-Siersburg Commune Saarland   14526   996\n21 Riegelsberg         Commune Saarland   14763   982\n22 Ottweiler           City    Saarland   14934   969\n23 Beckingen           Commune Saarland   15355   931\n24 Losheim am See      Commune Saarland   15906   887\n25 Schiffweiler        Commune Saarland   15993   882\n26 Wadern              City    Saarland   16181   874\n27 Schmelz             Commune Saarland   16435   857\n28 Sulzbach/Saar       City    Saarland   16591   849\n29 Illingen            Commune Saarland   16978   827\n30 Schwalbach          Commune Saarland   17320   812\n31 Eppelborn           Commune Saarland   17726   793\n32 Wadgassen           Commune Saarland   17885   785\n33 Bexbach             City    Saarland   18038   777\n34 Heusweiler          Commune Saarland   18201   762\n35 Püttlingen          City    Saarland   19134   718\n36 Lebach              City    Saarland   19484   701\n37 Dillingen/Saar      City    Saarland   20253   654\n38 Blieskastel         City    Saarland   21255   601\n39 St. Wendel          City    Saarland   26220   460\n40 Merzig              City    Saarland   29727   392\n41 Saarlouis           City    Saarland   34479   323\n42 St. Ingbert         City    Saarland   36645   299\n43 Völklingen          City    Saarland   38809   279\n44 Homburg             City    Saarland   41502   247\n45 Neunkirchen         City    Saarland   46172   206\n46 Saarbrücken         City    Saarland  175853    43\n47 Perl                Commune Saarland      NA    NA\n\n\n\nWith reference to the table above, we have identified an entry for the city of Perl that solely consists of NAs. This city is duplicated in the dataset, appearing at positions 1 and 47. The latter duplicate contains only NAs and can be safely removed without the loss of valuable information. Please eliminate this duplification and regenerate the list of all cities in the Saarland.\nCalculate the total population and average size of cities in Saarland.\nCheck if any other city is recorded more than once in the dataset. To do so, reproduce the table below.\n\n\n\n# A tibble: 23 × 5\n# Groups:   city [11]\n   city        status                  state               pop2011 unique_count\n   &lt;chr&gt;       &lt;chr&gt;                   &lt;chr&gt;                 &lt;dbl&gt;        &lt;int&gt;\n 1 Bonn        City with County Rights Nordrhein-Westfalen  305765            3\n 2 Bonn        City with County Rights Nordrhein-Westfalen  305765            3\n 3 Bonn        City with County Rights Nordrhein-Westfalen  305765            3\n 4 Brühl       Commune                 Baden-Württemberg     13805            2\n 5 Brühl       City                    Nordrhein-Westfalen   43568            2\n 6 Erbach      City                    Baden-Württemberg     13024            2\n 7 Erbach      City                    Hessen                13245            2\n 8 Fürth       City with County Rights Bayern               115613            2\n 9 Fürth       Commune                 Hessen                10481            2\n10 Lichtenau   City                    Nordrhein-Westfalen   10473            2\n11 Lichtenau   Commune                 Sachsen                7544            2\n12 Münster     Commune                 Hessen                14071            2\n13 Münster     City with County Rights Nordrhein-Westfalen  289576            2\n14 Neunkirchen Commune                 Nordrhein-Westfalen   13930            2\n15 Neunkirchen City                    Saarland              46172            2\n16 Neuried     Commune                 Baden-Württemberg      9383            2\n17 Neuried     Commune                 Bayern                 8277            2\n18 Petersberg  Commune                 Hessen                14766            2\n19 Petersberg  Commune                 Sachsen-Anhalt        10097            2\n20 Senden      City                    Bayern                21560            2\n21 Senden      Commune                 Nordrhein-Westfalen   19976            2\n22 Staufenberg City                    Hessen                 8114            2\n23 Staufenberg Commune                 Niedersachsen          7983            2\n\n\n\nThe table indicates that the city of Bonn appears three times in the dataset, and all three observations contain identical information. Thus, remove two of these observations to ensure that Bonn is uniquely represented in the dataset. All other cities that occur more than once in the data are situated in different states. That means, these are distinct cities that coincidentally share the same name.\n\n\n\nData analysis (Zipf’s Law)\nNote: If you have failed to solve the data cleaning tasks above, you can download the cleaned data from ILIAS, save it in your working directory and load it from there with: load(\"city_clean.RData\")\nIn the following, you aim to examine the validity of Zipf’s Law for Germany. Zipf’s Law postulates how the size of cities is distributed. The “law” states that there is a special relationship between the size of a city and the rank it occupies in a series sorted by city size. In the estimation equation \\[\n\\log(M_j) = c - q \\log(R_j),\n\\] the law postulates a coefficient of \\(( q=1 )\\). \\(c\\) is a constant; \\(M_j\\) is the size of city \\(j\\); \\(R_j\\) is the rank that city \\(j\\) occupies in a series sorted by city size.\n\n\n\nCreate a variable named rank that includes a ranking of cities based on the population size in the year 2011. Therefore, Berlin should have a rank of 1, Hamburg a rank of 2, Munich a rank of 3, and so on.\nNote: If you cannot solve this task, use the variable rankX as a substitute for the variable* rank that was not generated.\n\n\n# A tibble: 6 × 3\n  city                    pop2011  rank\n  &lt;chr&gt;                     &lt;dbl&gt; &lt;int&gt;\n1 Berlin                  3292365     1\n2 Hamburg                 1706696     2\n3 München [Munich]        1348335     3\n4 Köln [Cologne]          1005775     4\n5 Frankfurt am Main        667925     5\n6 Düsseldorf [Dusseldorf]  586291     6\n\n\n\nCalculate the Pearson Correlation Coefficient of the two variables pop2011 and rank. The result should be:\n\n\n\n[1] -0.2948903\n\n\n\nCreate a scatter plot. On the x-axis, plot the variable rank, and on the y-axis, plot pop2011. Add a regression line representing the observed relationship to the same scatter plot.\n\n\n\n\n\n\n\n\n\n\n\nLogarithmize the variables rank and pop2011. Title the new variables as lnrank and lnpop2011, respectively. Here is a snapshot of the resulting variables:\n\n\n\n# A tibble: 6 × 5\n  city                     rank lnrank pop2011 lnpop2011\n  &lt;chr&gt;                   &lt;int&gt;  &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;\n1 Berlin                      1  0     3292365      15.0\n2 Hamburg                     2  0.693 1706696      14.4\n3 München [Munich]            3  1.10  1348335      14.1\n4 Köln [Cologne]              4  1.39  1005775      13.8\n5 Frankfurt am Main           5  1.61   667925      13.4\n6 Düsseldorf [Dusseldorf]     6  1.79   586291      13.3\n\n\n\nCalculate the Pearson Correlation Coefficient of the two variables lnpop2011 and lnrank. The result should be:\n\n\n\n[1] -0.9990053\n\n\n\nCreate a scatter plot. On the x-axis, plot the variable lnrank, and on the y-axis, plot lnpop2011. Add a regression line representing the observed relationship to the same scatter plot. Additionally, add a title and label the axes like is shown here:\n\n\n\n\n\n\n\n\n\n\n\nNow, test the relationship postulated in Zipf’s Law. Regress the logarithmized city size in the year 2011 on the logarithmized rank of a city in a series sorted by city size. Briefly interpret the results, addressing the coefficient of determination. Show the regression results. Here is one way to present the results of the regression (Note: The way how you present your regression results do not matter):\n\n\n\n\nCall:\nlm(formula = lnpop2011 ~ lnrank, data = df)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.28015 -0.01879  0.01083  0.02005  0.25973 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 14.947859   0.005141    2908   &lt;2e-16 ***\nlnrank      -0.780259   0.000766   -1019   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.03454 on 2067 degrees of freedom\nMultiple R-squared:  0.998, Adjusted R-squared:  0.998 \nF-statistic: 1.038e+06 on 1 and 2067 DF,  p-value: &lt; 2.2e-16\n\n\n\nExplain the following lines of code.\n\n\ndf &lt;- df |&gt; \n  mutate(prediction = predict(zipf, newdata = df)) |&gt; \n  mutate(pred_pop = exp(prediction))\ndf |&gt; \n  select(city, pop2011, pred_pop) |&gt; \n  filter(city == \"Regensburg\")\n\n# A tibble: 1 × 3\n  city       pop2011 pred_pop\n  &lt;chr&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n1 Regensburg  135403  134194.\n\n\nSolutions are provided here.\n\n\n\nFigure 6.1: The logo of the DatasauRus package\nWeight vs. Calories\nRanking history: 1. FC Kaiserslautern\nRanking history: 1. FC Köln\n\n\n\nHortaçsu, A., & Syverson, C. (2015). The ongoing evolution of US retail: A format tug-of-war. Journal of Economic Perspectives, 29(4), 89–112.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Collection of exercises</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Chambers, J. M. (2017). Extending R. CRC Press.\n\n\nDavenport, T. H., & Patil, D. (2012). Data scientist: The sexiest\njob of the 21st century. Harvard Business Review,\n90(5), 70–76.\n\n\nHadley, W. (2014). Tidy data. Journal of Statistical Software,\n59(10), 1–23.\n\n\nHortaçsu, A., & Syverson, C. (2015). The ongoing evolution of\nUS retail: A format tug-of-war. Journal of Economic\nPerspectives, 29(4), 89–112.\n\n\nIrizarry, R. A. (2022). Introduction to data science: Data analysis\nand prediction algorithms with R. Accessed January 30,\n2023; CRC Press. https://rafalab.github.io/dsbook/\n\n\nIsmay, C., & Kim, A. Y. (2022). Statistical inference via data\nscience: A ModernDive into R and the tidyverse. CRC\nPress. https://moderndive.com/\n\n\nKabacoff, R. (2024). Modern data visualization with\nR. Chapman; Hall/CRC. https://rkabacoff.github.io/datavis/\n\n\nKelleher, J. D., & Tierney, B. (2018). Data science. MIT\nPress.\n\n\nKirchkamp, O. (2018). Using graphs and visualising data.\n\n\nMuschelli, J., & Jaffe, A. (2022). Introduction to\nR for public health researchers. GitHub. https://github.com/muschellij2/intro_to_r\n\n\nNavarro, D. (2020). Learning statistics with r (Version 0.6).\nhttps://learningstatisticswithr.com\n\n\nNeth, H. (2023). ds4psy: Data science for psychologists. Social\nPsychology; Decision Sciences, University of Konstanz. https://doi.org/10.5281/zenodo.7229812\n\n\nThulin, M. (2021). Modern statistics with R: From\nwrangling and exploring data to inference and predictive modelling.\nEos Chasma Press. https://www.modernstatisticswithr.com/\n\n\nTimbers, T., Campbell, T., & Lee, M. (2022). Data science: A\nfirst introduction. Accessed January 30, 2023; CRC Press. https://datasciencebook.ca/\n\n\nTufte, E. R. (2022). The visual display of quantitative\ninformation (2nd ed.). Graphics Press.\n\n\nVenables, W. N., Smith, D. M., & R Core Team. (2022). An\nintroduction to R: Notes on R: A programming\nenvironment for data analysis and graphics (Version 4.3.2\n(2023-10-31)). http://cran.r-project.org/doc/manuals/R-intro.pdf\n\n\nWickham, H., & Grolemund, G. (2023). R for data science\n(2e). https://r4ds.hadley.nz/\n\n\nWooldridge, J. M. (2002). Introductory econometrics: A modern approach.\nIn Delhi: Cengage Learnng (2nd ed.). South-Western.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "95_filesys.html",
    "href": "95_filesys.html",
    "title": "Appendix A — Helpful shortcuts",
    "section": "",
    "text": "B Navigating the file system\nIt is essential to know how R interacts with the file system on your computer. Modern operating systems are incredibly user-friendly and try to hide boring and annoying stuff from the customer. In the following, I will try to give a brief introduction on how to navigate around a computer using a DOS or UNIX shell. If you familiar with that, you can skip this part of the notes.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Helpful shortcuts</span>"
    ]
  },
  {
    "objectID": "95_filesys.html#sec-filesystem",
    "href": "95_filesys.html#sec-filesystem",
    "title": "Appendix A — Helpful shortcuts",
    "section": "B.1 The file system",
    "text": "B.1 The file system\nIn this section, I describe the basic idea behind file locations and file paths. Regardless of whether you are using Windows, macOS, or Linux, every file on the computer is assigned a human-readable address, and every address has the same basic structure: it describes a path that starts from a root location, through a series of folders (or directories), and finally ends up at the file.\nOn a Windows computer, the root is the storage device on which the file is stored, and for many home computers, the name of the storage device that stores all your files is C:. After that comes the folders, and on Windows, the folder names are separated by a backslash symbol \\. So, the complete path to this book on my Windows computer might be something like this:\nC:\\Users\\huber\\Rbook\\rcourse-book.pdf\nOn Linux, Unix, and macOS systems, the addresses look a little different, but they are more or less identical in spirit. Instead of using the backslash, folders are separated using a forward slash, and unlike Windows, they do not treat the storage device as being the root of the file system. So, the path on a Mac might be something like this:\n\n/Users/huber/Rbook/rcourse-book.pdf\n\nThat is what we mean by the path to a file. The next concept to grasp is the idea of a working directory and how to change it. For those of you who have used command-line interfaces previously, this should be obvious already. But if not, here is what I mean. The working directory is just whatever folder I am currently looking at. Suppose that I am currently looking for files in Explorer (if you are using Windows) or using Finder (on a Mac). The folder I currently have open is my user directory (i.e., C:\\Users\\huber or /Users/huber). That is my current working directory.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Helpful shortcuts</span>"
    ]
  },
  {
    "objectID": "95_filesys.html#working-directory",
    "href": "95_filesys.html#working-directory",
    "title": "Appendix A — Helpful shortcuts",
    "section": "B.2 Working directory",
    "text": "B.2 Working directory\nThe next concept to grasp is the idea of a working directory and how to change it. For those of you who have used command line interfaces previously, this should be obvious already. But if not, here’s what I mean. The working directory is just “whatever folder I’m currently looking at”. Suppose that I’m currently looking for files in Explorer (if you’re using Windows) or using Finder (on a Mac). The folder I currently have open is my user directory (i.e., C:\\Users\\huber or /Users/huber). That’s my current working directory.\nThe fact that we can imagine that the program is “in” a particular directory means that we can talk about moving from our current location to a new one. What that means is that we might want to specify a new location in relation to our current location. To do so, we need to introduce two new conventions. Regardless of what operating system you’re using, we use . to refer to the current working directory, and .. to refer to the directory above it. This allows us to specify a path to a new location in relation to our current location, as the following examples illustrate. Let’s assume that I’m using my Windows computer, and my working directory is C:\\Users\\huber\\Rbook. The table below shows several addresses in relation to my current one:\n\n\n\nAbsolute path\nRelative path\n\n\n\n\nC:\\Users\\huber\n..\n\n\nC:\\Users\n..\\..\n\n\nC:\\Users\\huber\\Rbook\\source\n.\\source\n\n\nC:\\Users\\huber\\nerdstuff\n..\\nerdstuff\n\n\n\nIt is quite common on computers that have multiple users to define ~ to be the user’s home directory. The home directory on a Mac for the `huber'' user is/Users/huber/. And so, not surprisingly, it is possible to define other directories in terms of their relationship to the home directory. For example, an alternative way to describe the location of thercourse-book.pdf` file on a Mac would be\n~\\Rbook\\rcourse-book.pdf\nYou can find out your home directory with the path.expand() function:\n\npath.expand(\"~\")\n\n[1] \"/home/sthu\"\n\n\nThus, on my machine ~ is an abbreviation for the path /home/sthu.\n\ngetwd()\n\n[1] \"/home/sthu/Dropbox/hsf/courses/dsr\"",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Helpful shortcuts</span>"
    ]
  },
  {
    "objectID": "95_filesys.html#sec-navigationR",
    "href": "95_filesys.html#sec-navigationR",
    "title": "Appendix A — Helpful shortcuts",
    "section": "B.3 Navigating the file system using the R console",
    "text": "B.3 Navigating the file system using the R console\nWhen you want to load or save a file in R it’s important to know what the working directory is. You can find out by using the getwd() command. For the moment, let’s assume that I’m using Mac OS or Linux, since things are different on Windows, see section @ref(sec:winbackslash). Let’s check the current active working directory:\n\ngetwd()\n\n[1] \"/home/sthu/Dropbox/hsf/courses/dsr\"\n\n\nThe function setwd() allows to change the working directory:\n\nsetwd(\"/Users/huber/Rbook/data\")\nsetwd(\"./Rbook/data\")\n\nThe function list.files() lists all the files in that directory:\n\nlist.files()",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Helpful shortcuts</span>"
    ]
  },
  {
    "objectID": "95_filesys.html#sec-rstudioprojects",
    "href": "95_filesys.html#sec-rstudioprojects",
    "title": "Appendix A — Helpful shortcuts",
    "section": "B.4 R Studio projects",
    "text": "B.4 R Studio projects\nSetting the working directory repeatedly can be a cumbersome task. Fortunately, R Studio projects can automate this process for you. When you open an R Studio project, the working directory is automatically set to the project directory.\nCreating a new project in R Studio is simple. Just click on File &gt; New Project…. This will create a directory on your computer with a _*.Rproj_ file that can be used to open the saved project at a later date. The newly created directory contains your R code, data files, and other project-related files. By working within projects, all of your files and data are organized in one place, making it easier to share your work with others, reproduce your analyses, and keep track of changes over time.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Helpful shortcuts</span>"
    ]
  },
  {
    "objectID": "95_filesys.html#sec-winbackslash",
    "href": "95_filesys.html#sec-winbackslash",
    "title": "Appendix A — Helpful shortcuts",
    "section": "B.5 Why do the Windows paths use the back-slash?",
    "text": "B.5 Why do the Windows paths use the back-slash?\nLet’s suppose I’m using a computer with Windows. As before, I can find out what my current working directory is like this:\n\ngetwd()\n[1] \"C:/Users/huber/\n\nR is displaying a Windows path using the wrong type of slash, the back-slash. The answer has to do with the fact that R treats the \\ character as special. If you’re deeply wedded to the idea of specifying a path using the Windows style slashes, then what you need to use two back-slashes \\\\ whenever you mean \\. In other words, if you want to specify the working directory on a Windows computer, you need to use one of the following commands:\n\nsetwd( \"C:/Users/huber\" )\nsetwd( \"C:\\\\Users\\\\huber\" )",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>Helpful shortcuts</span>"
    ]
  },
  {
    "objectID": "951_troubleshooting.html",
    "href": "951_troubleshooting.html",
    "title": "Appendix B — Troubleshooting",
    "section": "",
    "text": "Troubleshooting is perhaps the most important skill for a data scientist. To tackle problems effectively, you need to understand them, replicate them, and then work to solve them. To help you with this process, here are some guidelines:\nWhen seeking help, be sure to provide information about your machine, including the operating system, the version of R, and the packages you have loaded. You can use the sessionInfo() function to gather this information. Here’s an example from my machine:\n\nsessionInfo()\n\nR version 4.2.2 Patched (2022-11-10 r83330)\nPlatform: x86_64-pc-linux-gnu (64-bit)\nRunning under: Debian GNU/Linux 12 (bookworm)\n\nMatrix products: default\nBLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3\nLAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.21.so\n\nlocale:\n [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              \n [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    \n [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   \n [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 \n [9] LC_ADDRESS=C               LC_TELEPHONE=C            \n[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       \n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.2.2    fastmap_1.1.1     cli_3.6.2        \n [5] tools_4.2.2       htmltools_0.5.7   rstudioapi_0.15.0 rmarkdown_2.25   \n [9] knitr_1.45        jsonlite_1.8.8    xfun_0.41         digest_0.6.33    \n[13] rlang_1.1.2       evaluate_0.23",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>Troubleshooting</span>"
    ]
  },
  {
    "objectID": "952_operators.html",
    "href": "952_operators.html",
    "title": "Appendix C — Operators",
    "section": "",
    "text": "C.1 Assignment:",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Operators</span>"
    ]
  },
  {
    "objectID": "952_operators.html#assignment",
    "href": "952_operators.html#assignment",
    "title": "Appendix C — Operators",
    "section": "",
    "text": "&lt;- (assignment operator)",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Operators</span>"
    ]
  },
  {
    "objectID": "952_operators.html#arithmetic",
    "href": "952_operators.html#arithmetic",
    "title": "Appendix C — Operators",
    "section": "C.2 Arithmetic:",
    "text": "C.2 Arithmetic:\n\n+ (addition)\n- (subtraction)\n* (multiplication)\n/ (division)\n^ or ** (exponentiation)\n%% (modulo, remainder)\n%/% (integer division)",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Operators</span>"
    ]
  },
  {
    "objectID": "952_operators.html#relational",
    "href": "952_operators.html#relational",
    "title": "Appendix C — Operators",
    "section": "C.3 Relational:",
    "text": "C.3 Relational:\n\n&lt; (less than)\n&gt; (greater than)\n&lt;= (less than or equal to)\n&gt;= (greater than or equal to)\n== (equal to)\n!= or &lt;&gt; (not equal to)",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Operators</span>"
    ]
  },
  {
    "objectID": "952_operators.html#logical",
    "href": "952_operators.html#logical",
    "title": "Appendix C — Operators",
    "section": "C.4 Logical:",
    "text": "C.4 Logical:\n\n& (element-wise AND)\n| (element-wise OR)\n! (logical NOT)\n&& (scalar AND)\n|| (scalar OR)",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Operators</span>"
    ]
  },
  {
    "objectID": "952_operators.html#others",
    "href": "952_operators.html#others",
    "title": "Appendix C — Operators",
    "section": "C.5 Others:",
    "text": "C.5 Others:\n\n%*% (matrix multiplication)\n%in% (checks if an element is in a vector)\n%&gt;% or |&gt; (pipe operator from the magrittr package)\n[]: Extract content from vectors, lists, or data frames.\n[[ ]] and $: Extract a single item from an object.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>Operators</span>"
    ]
  },
  {
    "objectID": "953_popfunctions.html",
    "href": "953_popfunctions.html",
    "title": "Appendix D — Popular functions",
    "section": "",
    "text": "D.1 Help",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Popular functions</span>"
    ]
  },
  {
    "objectID": "953_popfunctions.html#help",
    "href": "953_popfunctions.html#help",
    "title": "Appendix D — Popular functions",
    "section": "",
    "text": "?: Search R documentation for a specific term.\n?? Search R help files for a word or phrase.\nRSiteSearch: Search search.r-project.org\nfindFn: Search search.r-project.org for functions (Hint: requires the “sos” library loaded!)\nhelp.start: Access to html manuals and documentations implemented in R\napropos: Returns a character vector giving the names of objects in the search list matching (as a regular expression) what.\nfind: Returns where objects of a given name can be found.\nvignette: View a specified package vignette, i.e., supporting material such as introductions.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Popular functions</span>"
    ]
  },
  {
    "objectID": "953_popfunctions.html#package-management",
    "href": "953_popfunctions.html#package-management",
    "title": "Appendix D — Popular functions",
    "section": "D.2 Package management",
    "text": "D.2 Package management\n\ninstall.packages: Installs packages from CRAN.\npacman::p_load: Installs and loads specified R packages.\nlibrary: (Install and) loads specified R packages.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Popular functions</span>"
    ]
  },
  {
    "objectID": "953_popfunctions.html#general",
    "href": "953_popfunctions.html#general",
    "title": "Appendix D — Popular functions",
    "section": "D.3 General",
    "text": "D.3 General\n\nsetwd: Sets the working directory to the specified path.\nrm: Removes objects (variables) from the workspace.\nsessionInfo: Information about the R environment.\nsource: Executes R code from a file.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Popular functions</span>"
    ]
  },
  {
    "objectID": "953_popfunctions.html#tools",
    "href": "953_popfunctions.html#tools",
    "title": "Appendix D — Popular functions",
    "section": "D.4 Tools",
    "text": "D.4 Tools\n\nelse: Execute a block of code if the preceding condition is false.\nelse if: Specify a new condition to test if the first condition is false.\nif: Execute a block of code if a specified condition is true.\nifelse: Check a condition for every element of a vector.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Popular functions</span>"
    ]
  },
  {
    "objectID": "953_popfunctions.html#data-import",
    "href": "953_popfunctions.html#data-import",
    "title": "Appendix D — Popular functions",
    "section": "D.5 Data import",
    "text": "D.5 Data import\n\nc: Combine values into a vector or list.\nread.csv: Reads a CSV file into a data frame.\nread_dta: Read Stata dataset.\nload: Loads an RData file.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Popular functions</span>"
    ]
  },
  {
    "objectID": "953_popfunctions.html#inspect-data",
    "href": "953_popfunctions.html#inspect-data",
    "title": "Appendix D — Popular functions",
    "section": "D.6 Inspect data",
    "text": "D.6 Inspect data\n\ndim: Returns the dimensions (number of rows and columns) of a data frame.\nglimpse: Provide a concise summary.\nhead: Returns the first elements.\nlength: Returns the number of elements in an object.\nprint: Prints the specified object.\nnames: Returns the variable names in a data frame.\nn() or nrow(): Counts the number of observations in a data frame or group of observations.\nncol: Returns the number of columns in a data frame.\nsummary: Summary statistics.\ntable: Create a table of counts or cross-tabulation.\ntail: Returns the first n elements.\nunique: Extracts unique elements from a vector.\nview: Opens a viewer for data frames.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Popular functions</span>"
    ]
  },
  {
    "objectID": "953_popfunctions.html#graphics",
    "href": "953_popfunctions.html#graphics",
    "title": "Appendix D — Popular functions",
    "section": "D.7 Graphics",
    "text": "D.7 Graphics\n\nabline: Adds lines to a plot.\naes: Aesthetic mapping in ggplot.\nfacet_wrap: Creates a grid of facetted plots.\ngeom_hline: Adds horizontal lines to a ggplot.\ngeom_line: Adds lines to a ggplot.\ngeom_point: Adds points to a ggplot.\ngeom_smooth: Adds a smoothed line to a ggplot.\ngeom_text: Adds text to a ggplot.\ngeom_vline: Adds vertical lines to a ggplot.\nggsave: Saves a ggplot to a file.\nlabs: Adds or modifies plot labels.\nplot: Creates a scatter plot.\nscale_y_reverse: Reverses the y-axis in a ggplot.\nstat_smooth: Adds a smoothed line to a ggplot.\ntheme_classic: Applies a classic theme to a ggplot.\ntheme_minimal: Applies a minimal theme to a ggplot.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Popular functions</span>"
    ]
  },
  {
    "objectID": "953_popfunctions.html#data-management",
    "href": "953_popfunctions.html#data-management",
    "title": "Appendix D — Popular functions",
    "section": "D.8 Data management",
    "text": "D.8 Data management\n\narrange: Reorder the rows of a data frame.\nclean_names: Cleans names of an object (usually a data.frame).\ncomplete: Completes a data frame with all combinations of specified columns.\ndata.frame: Creates a data frame.\ndistinct: Removes duplicate rows from a data frame.\nidentical: Check if two objects are identical.\nis(na): Identify and flag a missing or undefined value (NA).\nis_tibble: Check if an object is a tibble.\nrm: Removes objects (variables) from the workspace.\nrelocate: Reorders columns in a dataframe.\nround: Rounds a numeric vector to the nearest integer.\nrownames: Get or set the row names of a matrix-like object.\ntibble: Creates a tibble, a modern and tidy data frame.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Popular functions</span>"
    ]
  },
  {
    "objectID": "953_popfunctions.html#dplyr-functions",
    "href": "953_popfunctions.html#dplyr-functions",
    "title": "Appendix D — Popular functions",
    "section": "D.9 dplyr functions",
    "text": "D.9 dplyr functions\n\narrange: Reorder the rows of a data frame.\ncomplete: Completes a data frame with all combinations of specified columns.\nends_with: matches to a specified suffix\nfilter: Pick observations by their values.\nfirst: Returns the first element.\ngroup_by: Group data by one or more variables.\nlast: Returns the last element.\nmutate: Add new variables or modify existing variables in a data frame.\nnth: Returns the nth element.\nn_distinct: Returns the number of distinct elements.\nrename: Rename variables in a data frame.\nrename_all: Renames all variables in a data frame.\nrow_number: Adds a column with row numbers.\nrowwise: Perform operations row by row.\nselect: Pick variables by their names.\nselect_all: Selects all columns in a data frame.\nslice_head: Selects the top N rows from each group.\nstarts_with: Select variables whose names start with a certain string.\nsummarise: Reduce data to a single summary value.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Popular functions</span>"
    ]
  },
  {
    "objectID": "953_popfunctions.html#data-analysis",
    "href": "953_popfunctions.html#data-analysis",
    "title": "Appendix D — Popular functions",
    "section": "D.10 Data analysis",
    "text": "D.10 Data analysis\n\naggregate: Apply a function to the data by levels of one or more factors.\nanti_join: Return rows from the first data frame that do not have a match in the second data frame.\ncor: Computes correlation coefficients.\ncov: Computes covariance.\ndiff: Calculates differences between consecutive elements.\nget_dupes: Identify duplicate rows in a data frame (from the janitor package).\npaste0: Concatenate vectors after converting to character.\npredict: Predict method for model fits.\nprop.table: Create a table of proportions.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Popular functions</span>"
    ]
  },
  {
    "objectID": "953_popfunctions.html#statistical-functions",
    "href": "953_popfunctions.html#statistical-functions",
    "title": "Appendix D — Popular functions",
    "section": "D.11 Statistical functions",
    "text": "D.11 Statistical functions\n\ncor(): Computes correlation coefficients.\ncov(): Computes the covariance.\nexp(): Exponential function.\nIQR(): Computes the interquartile range.\nkurtosis(): Computes the kurtosis.\nlog(): Natural logarithm.\nmad(): Computes the mean absolute deviation.\nmax(): Returns the maximum value.\nmean(): Calculates the mean.\nmedian(): Computes the median.\nmin(): Returns the minimum value.\nquantile(): Computes sample quantiles.\nsd(): Calculates the standard deviation.\nskewness(): Calculates the skewness.\nvar(): Calculates the variance.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>D</span>  <span class='chapter-title'>Popular functions</span>"
    ]
  }
]