[
  {
    "objectID": "22_script.html",
    "href": "22_script.html",
    "title": "3  Work with R scripts",
    "section": "",
    "text": "3.1 R Scripts: Why they are useful\nTyping functions into the console to run code may seem simple, but this interactive style has limitations:\nThat’s where having a transcript of all the code, which can be re-run and edited at any time, becomes useful. An R script is precisely that - a plain text file that contains code and comments and this comes with advantages:",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Work with R scripts</span>"
    ]
  },
  {
    "objectID": "22_script.html#r-scripts-why-they-are-useful",
    "href": "22_script.html#r-scripts-why-they-are-useful",
    "title": "3  Work with R scripts",
    "section": "",
    "text": "Typing commands one at a time can be cumbersome and time-consuming.\nIt’s hard to save your work effectively.\nGoing back to the beginning when you make a mistake is annoying.\nYou can’t leave notes for yourself.\nReusing and adapting analyses can be difficult.\nIt’s hard to do anything except the basics.\nSharing your work with others can be challenging.\n\n\n\nScripts provide a record of everything you did during your data analysis.\nYou can easily edit and re-run code in a script.\nScripts allow you to leave notes for yourself.\nScripts make it easy to reuse and adapt analyses.\nScripts allow you to do more complex analyses.\nScripts make it easy to share your work with others.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Work with R scripts</span>"
    ]
  },
  {
    "objectID": "22_script.html#generate-write-and-run-r-scripts",
    "href": "22_script.html#generate-write-and-run-r-scripts",
    "title": "3  Work with R scripts",
    "section": "3.2 Generate, write, and run R scripts",
    "text": "3.2 Generate, write, and run R scripts\nTo generate a script you can\n\nGo to the File menu, select New File and then choose R Script or\nUse the keyboard shortcut Ctrl+Shift+N (Windows) or Cmd+Shift+N (Mac) or\nType the following command in the Console:\n\n\nfile.create(\"hello.R\")\n\nIn the first two ways, a new R script window will open which can be edited and should be saved either by clicking on the File menu and selecting Save, clicking the disk icon, or by using the shortcut Ctrl+S (Windows) or Cmd+S (Mac). If you go for the third way, you need to open it manually.\nRegardless of your preferred way of generating a script, we can now start writing our first script:\n\nsetwd(\"/home/sthu/Dropbox/hsf/23-ss/ds/\")\nx &lt;- \"hello world\"\nprint(x)\n\nThen save the script using the menus (File &gt; Save) as hello.R.\nThe above lines of code do the following:\n\nsetwd() allows to set the working directory. If you are not familiar with file systems, please read section @ref(sec:navigation) in the appendix.\nWith the assignment operator &lt;- we create an object that stores the words “hello world” in an object entitled x. In the next section @ref(sec:assignmentoper) the assignment operator is further explained.\nWith the third input we print the content of the object x.\n\nSo how do we run the script? Assuming that the hello.R file has been saved to your working directory, then you can run the script using the following command:\n\nsource( \"hello.R\" )\n\nSuppose you saved the script in a sub-folder called of your working directory, then you need to run the script using the following command:\n\nsource(\"./scripts/hello.R\") \n\nJust note that the dot, ., means the current folder. Instead of using the source function, you can click on the source button in Rstudio.\nWith the character # you can write a comment in a script and R will simply ignore everything that follows in that line onwards.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Work with R scripts</span>"
    ]
  },
  {
    "objectID": "22_script.html#sec:assignmentoper",
    "href": "22_script.html#sec:assignmentoper",
    "title": "3  Work with R scripts",
    "section": "3.3 The assignment operator: <-",
    "text": "3.3 The assignment operator: &lt;-\nSuppose I’m trying to calculate how much money I’m going to make from this book. I agree, it is an unrealistic example but it will help you to understand R. Let’s assume I’m only going to sell 350 copies. To create a variable called sales and assigns a value to it, we need to use the assignment operator of R, which is &lt;- as follows:\n\nsales &lt;- 350\n\nWhen you hit enter, R doesn’t print out any output. If you are using Rstudio, and the environment panel you can see that something happened there, can you? It just gives you another command prompt. However, behind the scenes R has created a variable called sales and given it a value of 350. You can check that this has happened by asking R to print the variable on screen. And the simplest way to do that is to type the name of the variable and hit enter.\n\nsales\n\n[1] 350\n\n\nWorth a mentioning is the curious features of R that there are several different ways of making assignments. In addition to the &lt;- operator, we can also use -&gt; and =. If you want to use -&gt;, you might expect from just looking at the symbol you should write it like this:\n\n350 -&gt; sales\n\nHowever, it is common practice to use &lt;- and I recommend only to use this one because it is easier to read in scripts.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Work with R scripts</span>"
    ]
  },
  {
    "objectID": "22_script.html#doing-calculation-in-scripts",
    "href": "22_script.html#doing-calculation-in-scripts",
    "title": "3  Work with R scripts",
    "section": "3.4 Doing calculation in scripts",
    "text": "3.4 Doing calculation in scripts\nR can do any kind of arithmetic calculation with the arithmetic operators given in the table below. Using the assignment operator, R functions, and the features of a R script is easy and gives an idea how R works and how you should embrace the power of the programming language.\n\n\n\noperation\noperator\nexample input\nexample output\n\n\n\n\naddition\n+\n10+2\n12\n\n\nsubtraction\n-\n9-3\n6\n\n\nmultiplication\n*\n5*5\n25\n\n\ndivision\n/\n10/3\n3\n\n\npower\n^\n5^2\n25\n\n\n\nSo please copy and past the following lines of code into a R script of yours, try to run it on your PC, and try to understand it. Of course, you have to tweak the script a bit to make it run on your PC. For example, I doubt you have the same working directory that I decided to use.\n\n# Set working directory\nsetwd(\"~/Dropbox/hsf/23-ss/ds\")\n# Create a vector that contains the sales data\nsales_by_month &lt;- c(0, 100, 200, 50, 3, 4, 8, 0, 0, 0, 0, 0)\nsales_by_month\nsales_by_month[2]\nsales_by_month[4]\nfebruary_sales &lt;- sales_by_month[2]\nfebruary_sales\nsales_by_month[5] &lt;- 25 # added May sales data\nsales_by_month\n# Do I have 12 month?\nlength( x = sales_by_month )\n# Assume each unit costs 7 Euro, then the revenue is\nprice &lt;- 7\nrevenue &lt;- sales_by_month*price\nrevenue\n# To get statistics for daily revenue we define the number of days:\ndays_per_month &lt;- c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31)\n# Calculate the daily revenue\nrevenue_per_day &lt;- revenue/days_per_month\nrevenue_per_day \n# round number \nround(revenue_per_day) \n\nUse the “?” to search for the documentation of all functions used. In particular, do you understand how the function round() works? What arguments does the function contain? How can you manipulate the pre-defined arguments. For example, can you calculate the rounded revenue per day with two or four digits? Try it out!\n\n?round()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Work with R scripts</span>"
    ]
  },
  {
    "objectID": "22_script.html#sec:generics",
    "href": "22_script.html#sec:generics",
    "title": "3  Work with R scripts",
    "section": "3.5 User-defined functions",
    "text": "3.5 User-defined functions\nOne of the great strengths of R is the user’s ability to add functions. Sometimes there is a small task (or series of tasks) you need done and you find yourself having to repeat it multiple times. In these types of situations it can be helpful to create your own custom function. The structure of a function is given below:\n\nname_of_function &lt;- function(argument1, argument2) {\n    statements or code that does something\n    return(something)\n}\n\nFirst you give your function a name. Then you assign value to it, where the value is the function. When defining the function you will want to provide the list of arguments required (inputs and/or options to modify behavior of the function), and wrapped between curly brackets place the tasks that are being executed on/using those arguments. The argument(s) can be any type of object (like a scalar, a matrix, a dataframe, a vector, a logical, etc), and it’s not necessary to define what it is in any way. Finally, you can return the value of the object from the function, meaning pass the value of it into the global environment. The important idea behind functions is that objects that are created within the function are local to the environment of the function – they don’t exist outside of the function. Note, a function doesn’t require any arguments.\nLet’s try creating a simple example function. This function will take in a numeric value as input, and return the squared value.\n\nsquare_it &lt;- function(x) { \n   square &lt;- x * x\n   return(square)\n} \n\nNow, we can use the function as we would any other function. We type out the name of the function, and inside the parentheses we provide a numeric value x:\n\nsquare_it(5)\n\n[1] 25\n\n\nLet us get back to script with sales and try to calculate the monthly growth rates of revenue using a self-written function.\nThe formula of a growth rate is clear:\n\\[ g=\\left(\\frac{y_t-y_{t-1}}{y_{t-1}}\\right)\\cdot 100=\\left(\\frac{y_t}{y_{t-1}}-1\\right)\\cdot 100 \\]\nSo the challenge is to divide the value of revenue with the value of the previous period, a.k.a. the lagged value. Let us assume that the function lag() can give you exactly that value of a vector. Lets try it out:\n\nlag(revenue)\n\n [1]    0  700 1400  350  175   28   56    0    0    0    0    0\nattr(,\"tsp\")\n[1]  0 11  1\n\n(revenue/lag(revenue)-1)*100 \n\n [1] NaN   0   0   0   0   0   0 NaN NaN NaN NaN NaN\nattr(,\"tsp\")\n[1]  0 11  1\n\n\nUnfortunately, this does not work out. The lag() function does not work as we think it should. Well, the reason is simply that we are using the wrong function. The current lag() function is part of the stats package which is part of the package stats which is part of R base and is loaded automatically. The lag() function we aim to use stems from the dplyr package which we must install and load to be able to use it. So let’s do it:\n\n# check if the package is installed\nfind.package(\"dplyr\")\n\n[1] \"/home/sthu/R/x86_64-pc-linux-gnu-library/4.3/dplyr\"\n\n# I already installed the package so I can just load it\n# install.packages(\"dplyr\")\nlibrary(\"dplyr\")\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nThis message informs us that among other functions the lag() function is masked. That means that now the function of the newly loaded package is active. So, let’s try again:\n\nlag(revenue)\n\n [1]   NA    0  700 1400  350  175   28   56    0    0    0    0\n\n(revenue/lag(revenue)-1)*100 \n\n [1]   NA  Inf  100  -75  -50  -84  100 -100  NaN  NaN  NaN  NaN\n\n\nThat looks good now. And here is a way to calculate growth rates with a self-written function:\n\ngrowth_rate &lt;- function(x)(x/lag(x)-1)*100 \ngrowth_rate(revenue)\n\n [1]   NA  Inf  100  -75  -50  -84  100 -100  NaN  NaN  NaN  NaN\n\nsales_gr_rate &lt;- growth_rate(revenue)\nsales_gr_rate\n\n [1]   NA  Inf  100  -75  -50  -84  100 -100  NaN  NaN  NaN  NaN\n\n\nIn R, all functions are written by users, and it is not uncommon for two people to name their functions identically. In such cases, we must resolve the conflict by choosing which function to use. To use the lag function from the stats package, you can use the double colon operator :: like this stats::lag(arguments).",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Work with R scripts</span>"
    ]
  }
]