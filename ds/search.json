[
  {
    "objectID": "10_swirl.html",
    "href": "10_swirl.html",
    "title": "2  An interactive introduction using swirl",
    "section": "",
    "text": "2.1 swirl-it — huber-intro-1\nAfter you have successfully finished learning module huber-intro-1 please go ahead with the learning module huber-intro-2 that is also part of my swirl course swirl-it.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Learn interactively with swirl</span>"
    ]
  },
  {
    "objectID": "10_swirl.html#swirl-it-huber-intro-1",
    "href": "10_swirl.html#swirl-it-huber-intro-1",
    "title": "2  An interactive introduction using swirl",
    "section": "",
    "text": "Click to see the full content of the module\n\n\n\n\n\nWelcome to this swirl course. If you find any errors or if you have suggestions for improvement, please let me know via stephan.huber@hs-fresenius.de.\nThe RStudio interface consists of several windows. You can change the size of the windows by dragging the grey bars between the windows. We’ll go through the most important windows now.\nBottom left is the Console window (also called command window/line). Here you can type commands after the &gt; prompt and R will then execute your command. This is the most important window, because this is where R actually does stuff.\nTop left is the Editor window (also called script window). Here collections of commands (scripts) can be edited and saved. When you do not get this window, you can open it with ‘File’ &gt; ‘New’ &gt; ‘R script’.\nJust typing a command in the editor window is not enough, it has to be send to the Console before R executes the command. If you want to run a line from the script window (or the whole script), you can click ‘Run’ or press ‘CTRL+ENTER’ to send it to the command window.\nThe shortcut to send the current line to the console and run it there is _________.\n\nCTRL+SHIFT\nCTRL+ENTER\nCTRL+SPACE\nSHIFT+ENTER\n\nHint: You find all shortcuts in the menu at Tools &gt; Keyboard Shortcuts Help or click ALT+SHIFT+K. If you are a Mac user, your shortcut is ‘Cmd+Return’ instead of ‘SHIFT+ENTER’. To move on type skip().\n\n\n\n\n\n\nSolution\n\n\n\n\n\nanswer: b\n\n\n\nTop right is the environment window (a.k.a workspace). Here you can see which data R has in its memory. You can view and edit the values by clicking on them.\nBottom right is the plots / packages / help window. Here you can view plots, install and load packages or use the help function.\nThe first thing you should do whenever you start Rstudio is to check if you are happy with your working directory. That directory is the folder on your computer in which you are currently working. That means, when you ask R to open a certain file, it will look in the working directory for this file, and when you tell R to save a data file or figure, it will save it in the working directory.\nYou can check your working directory with the function getwd(). So let’s do that. Type in the command window getwd() .\n\ngetwd()\n\n[1] \"/home/sthu/Dropbox/hsf/courses/dsr\"\n\n\nAre you happy with that place? if not, you should set your working directory to where all your data and script files are (or will be). Within RStudio you can go to ‘Session’ &gt; ‘Set working directory’ &gt; ‘Choose directory’. Please do this now.\nInstead of clicking, you can use the function setwd(\"/YOURPATH\"). For example, setwd(\"/Users/MYNAME/MYFOLDER\") or setwd(\"C:/Users/jenny/myrstuff\"). Make sure that the slashes are forward slashes and that you do not forget the apostrophes. R is case sensitive, so make sure you write capitals where necessary.\nWhenever you want R to do something you need to use a function. It is like a command. All functions of R are organized in so-called packages or libraries. With the standard installation many packages are already installed. However, many more exist and some of them are really cool. For example, with installed.packages() all installed packages are listed. Or, with swirl(), you started swirl.\nOf course, you can also go to the Packages window at the bottom right. If the box in front of the package name is ticked, the package is loaded (activated) and can be used. To see via Console which packages are loaded type in the console (.packages())\n\n(.packages())\n\n[1] \"stats\"     \"graphics\"  \"grDevices\" \"utils\"     \"datasets\"  \"methods\"  \n[7] \"base\"     \n\n\nThere are many more packages available on the R website. If you want to install and use a package (for example, the package called geometry) you should first install the package. Type install.packages(\"geometry\") in the console. Don’t be afraid about the many messages. Depending on your PC and your internet connection this may take some time.\n\ninstall.packages(\"geometry\")\n\nAfter having installed a package, you need to load the package. That is a bit annoying but essential. Type in library(\"geometry\") in the Console. You also did this for the swirl package (otherwise you couldn’t have been doing these exercises).\n\nlibrary(\"geometry\")\n\nCheck if the package is loaded typing (.packages())\n\n(.packages())\n\nNow, let’s get started with the real programming.\nR can be used as a calculator. You can just type your equation in the command window after the &gt;. Type 10^2 + 36.\n\n10^2 + 36\n\n[1] 136\n\n\nAnd R gave the answer directly. By the way, spaces do not matter.\nIf you use brackets and forget to add the closing bracket, the &gt; on the command line changes into a +. The + can also mean that R is still busy with some heavy computation. If you want R to quit what it was doing and give back the &gt;, press ESC.\nYou can also give numbers a name. By doing so, they become so-called variables which can be used later. For example, you can type in the command window A &lt;- 4.\n\nA &lt;- 4\n\nThe &lt;- is the so-called assignment operator. It allows you to assign data to a named object in order to store the data.\nDon’t be confussed about the term object. All sorts of data are stored in so-called objects in R. All objects of a session are shown in the Environment window. In the second part of this course, I will introduce different data types.\nYou can see that A appeared in the environment window in the top right corner, which means that R now remembers what A is.\nYou can also ask R what A is. Just type A in the command window.\n\nA\n\n[1] 4\n\n\nYou can also do calculations with A. Type A * 5 .\n\nA*5\n\n[1] 20\n\n\nIf you specify A again, it will forget what value it had before. You can also assign a new value to A using the old one. Type A &lt;- A + 10 .\n\nA &lt;- A + 10\n\nYou can see that the value in the environment window changed.\nTo remove all variables from R’s memory, type rm(list=ls()) .\n\nrm(list=ls())\n\nYou see that the environment window is now empty. You can also click the broom icon (clear all) in the environment window. You can see that RStudio then empties the environment window. If you only want to remove the variable A, you can type rm(A).\nLike in many other programs, R organizes numbers in scalars (a single number, 0-dimensional), vectors (a row of numbers, also called arrays, 1-dimensional) and matrices (like a table, 2-dimensional).\nThe A you defined before was a scalar. To define a vector with the numbers 3, 4 and 5, you need the function c(), which is short for concatenate (paste together). Type B=c(3,4,5).\n\nB=c(3,4,5)\n\nIf you would like to compute the mean of all the elements in the vector B from the example above, you could type (3+4+5)/3. Try this\n\n(3+4+5)/3\n\n[1] 4\n\n\nBut when the vector is very long, this is very boring and time-consuming work. This is why things you do often are automated in so-called functions. For example, type mean(x=B) and guess what this function mean() can do for you.\n\nmean(x=B)\n\n[1] 4\n\n\nWithin the brackets you specify the arguments. Arguments give extra information to the function. In this case, the argument x says of which set of numbers (vector) the mean should be computed (namely of B). Sometimes, the name of the argument is not necessary; mean(B) works as well. Try it.\n\nmean(B)\n\n[1] 4\n\n\nCompute the sum of 4, 5, 8 and 11 by first combining them into a vector and then using the function sum. Use the function c inside the function sum.\n\nsum(c(4,5,8,11))\n\n[1] 28\n\n\nThe function rnorm, as another example, is a standard R function which creates random samples from a normal distribution. Type rnorm(10) and you will see 10 random numbers\n\nrnorm(10)\n\n [1]  0.3739802  0.2621407 -1.0961074 -0.4850495 -0.8998608 -0.2066606\n [7]  0.7689090  1.6060894  1.4325327 -0.2737993\n\n\nHere rnorm is the function and the 10 is an argument specifying how many random numbers you want - in this case 10 numbers (typing n=10 instead of just 10 would also work). The result is 10 random numbers organised in a vector with length 10.\nIf you want 10 random numbers out of normal distribution with mean 1.2 and standard deviation 3.4 you can type rnorm(10, mean=1.2, sd=3.4). Try this.\n\nrnorm(10, mean=1.2, sd=3.4)\n\n [1] -4.1287165  1.8350075  5.0350289  2.9667108  5.3026624  3.3028128\n [7]  0.5979675  1.9068619  4.6639428 -0.7691244\n\n\nThis shows that the same function (rnorm()) may have different interfaces and that R has so called named arguments (in this case mean and sd).\nComparing this example to the previous one also shows that for the function rnorm only the first argument (the number 10) is compulsory, and that R gives default values to the other so-called optional arguments. Use the help function to see which values are used as default by typing ?rnorm.\n\n?rnorm\n\nYou see the help page for this function in the help window on the right. RStudio has a nice features such as autocompletion and snapshots of the R documentation. For example, when you type rnorm( in the command window and press TAB, RStudio will show the possible arguments.\nYou can also store the output of the function in a variable. Type x=rnorm(100).\n\nx=rnorm(100)\n\nNow 100 random numbers are assigned to the variable x, which becomes a vector by this operation. You can see it appears in the Environment window.\nR can also make graphs. Type plot(x) for a very simple example.\n\nplot(x)\n\n\n\n\n\n\n\n\nThe 100 random numbers are now plotted in the plots window on the right.\nYou now are more familiar to RStudio and you know some basic R stuff. In particular, you know…\n…that everything in R is said with functions,\n…that functions can but don’t have to have arguments,\n…that you can install packages which contain functions,\n…that you must load the installed packages every time you start a session in RStudio, and\n…that this is just the beginning. Thus, please continue with the second module of this introduction.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Learn interactively with swirl</span>"
    ]
  },
  {
    "objectID": "10_swirl.html#swirl-it-huber-intro-2",
    "href": "10_swirl.html#swirl-it-huber-intro-2",
    "title": "2  An interactive introduction using swirl",
    "section": "2.2 swirl-it — huber-intro-2",
    "text": "2.2 swirl-it — huber-intro-2\n\n\n\n\n\n\nClick to see the full content of the module\n\n\n\n\n\nWelcome to the second module. Again, if you find any errors or if you have suggestions for improvement, please let me know via stephan.huber@hs-fresenius.de .\nBefore you start working, you should set your working directory to where all your data and script files are or should be stored. Within RStudio you can go to ‘Session’&gt; ‘Set working directory’, or you can type in setwd(YOURPATH). Please do this now.\n\nsetwd(getwd())\n\nHint: Instead of clicking, you can also type setwd(“path”), where you replace “path” with the location of your folder, for example setwd(“D:/R/swirl”).\nR is an interpreter that uses a command line based environment. This means that you have to type commands, rather than use the mouse and menus. This has many advantages. Foremost, it is easy to get a full transcript of everything you did and you can replicate your work easy.\nAs already mentioned, all commands in R are functions where arguments come (or do not come) in round brackets after the function name.\nYou can store your workflow in files, the so-called scripts. These scripts have typically file names with the extension, e.g., foo.R .\nYou can open an editor window to edit these files by clicking ‘File’ and ‘New’. Try this. Under ‘File’ you also find the options ‘Open file…’, ‘Save’ and ‘Save as’. Alternatively, just type CTRL+SHIFT+N.\nYou can run (send to the Console window) part of the code by selecting lines and pressing CTRL+ENTER or click ‘Run’ in the editor window. If you do not select anything, R will run the line your cursor is on.\nYou can always run the whole script with the console command source, so e.g. for the script in the file foo.R you type source(‘foo.R’). You can also click ‘Run all’ in the editor window or type CTRL+SHIFT+S to run the whole script at once.\nMake a script called firstscript.R. Therefore, open the editor window with ‘File’ &gt; ‘New’. Type plot(rnorm(100)) in the script, save it as firstscript.R in the working directory. Then type source(\"firstscript.R\") on the command line.\n\nsource(\"firstscript.R\")\n\nRun your script again with source(\"firstscript.R\"). The plot will change because new numbers are generated.\n\nsource(\"firstscript.R\")\n\nHint: Type source(“firstscript.R”) again or type skip() if you are not interested.\nVectors were already introduced, but they can do more. Make a vector with numbers 1, 4, 6, 8, 10 and call it vec1.\nHint: Type vec1 &lt;- c(1,4,6,8,10).\n\nvec1 &lt;- c(1,4,6,8,10)\n\nElements in vectors can be addressed by standard [i] indexing. Select the 5th element of this vector by typing vec1[5].\n\nvec1[5]\n\nReplace the 3rd element with a new number by typing vec1[3]=12.\n\nvec1[3] &lt;- 12 \n\nAsk R what the new version is of vec1.\n\nvec1\n\nYou can also see the numbers of vec1 in the environment window. Make a new vector vec2 using the seq() (sequence) function by typing seq(from=0, to=1, by=0.25) and check its values in the environment window.\nHint: Type vec2 &lt;- seq(from=0, to=1, by=0.25).\n\nvec2 &lt;-seq(from=0, to=1, by=0.25) \n\nType sum(vec1).\n\nsum(vec1)\n\nThe function sum sums up the elements within a vector, leading to one number (a scalar). Now use + to add the two vectors.\nHint: Type vec1 + vec2.\n\nvec1+vec2\n\nIf you add two vectors of the same length, the first elements of both vectors are summed, and the second elements, etc., leading to a new vector of length 5 (just like in regular vector calculus).\nMatrices are nothing more than 2-dimensional vectors. To define a matrix, use the function matrix. Make a matrix with matrix(data=c(9,2,3,4,5,6),ncol=3) and call it mat.\nHint: Type mat &lt;- matrix(data=c(9,2,3,4,5,6),ncol=3) or type skip() if you are not interested.\n\nmat&lt;-matrix(data=c(9,2,3,4,5,6),ncol=3)\n\nThe third type of data structure treated here is the data frame. Time series are often ordered in data frames. A data frame is a matrix with names above the columns. This is nice, because you can call and use one of the columns without knowing in which position it is. Make a data frame with t = data.frame(x = c(11,12,14), y = c(19,20,21), z = c(10,9,7)).\n\nt &lt;- data.frame(x = c(11,12,14), y = c(19,20,21), z = c(10,9,7))\n\nAsk R what t is.\nHint: Type t or skip() if you are not interested.\n\nt\n\nThe data frame is called t and the columns have the names x, y and z. You can select one column by typing t$z. Try this.\n\nt$z\n\nAnother option is to type t[[\"z\"]]. Try this as well.\n\nt[[\"z\"]]\n\nCompute the mean of column z in data frame t.\nHint: Use function mean or type skip() if you are not interested.\n\nmean(t$z)\n\nIn the following question you will be asked to modify a script that will appear as soon as you move on from this question. When you have finished modifying the script, save your changes to the script and type submit() and the script will be evaluated. There will be some comments in the script that opens up. Be sure to read them!\nMake a script file which constructs three random normal vectors of length 100. Call these vectors x1, x2 and x3. Make a data frame called t with three columns (called a, b and c) containing respectively x1, x1+x2 and x1+x2+x3. Call plot(t) for this data frame. Then, save it and type submit() on the command line.\nHint: Type plot(rnorm(100)) in the script, save it and type submit() on the command line.\n\n# Text behind the #-sign is not evaluated as code by R. \n# This is useful, because it allows you to add comments explaining what the script does.\n\n# In this script, replace the ... with the appropriate commands.\n\n\nx1 = ...\nx2 = ...\nx3 = ...\nt = ...\nplot(...)\n\n\n\n\n\n\n\nResult\n\n\n\n\n\n\n# Text behind the #-sign is not evaluated as code by R. \n# This is useful, because it allows you to add comments explaining what the script does.\n\n# In this script, replace the ... with the appropriate commands.\n\nx1 = rnorm(100)\nx2 = rnorm(100)\nx3 = rnorm(100)\nt = data.frame(a=x1, b=x1+x2, c=x1+x2+x3)\nplot(t)\n\n\n\n\nDo you understand the results?\nAnother basic structure in R is a list. The main advantage of lists is that the columns (they are not really ordered in columns any more, but are more a collection of vectors) don’t have to be of the same length, unlike matrices and data frames. Make this list L &lt;- list(one=1, two=c(1,2), five=seq(0, 1, length=5)).\n\nL &lt;- list(one=1, two=c(1,2), five=seq(0, 1, length=5))\n\nThe list L has names and values. You can type L to see the contents.\n\nL\n\nL also appeared in the environment window. To find out what’s in the list, type names(L).\n\nnames(L)\n\nAdd 10 to the column called five.\nHint: Type L$five + 10\n\nL$five + 10\n\nPlotting is an important statistical activity. So it should not come as a surprise that R has many plotting facilities. Type plot(rnorm(100), type=\"l\", col=\"gold\").\nHint: The symbol between quotes after the type=, is the letter l, not the number 1. To see the result you can also just type skip().\n\nplot(rnorm(100), type=\"l\", col=\"gold\") \n\nHundred random numbers are plotted by connecting the points by lines in a gold color.\nAnother very simple example is the classical statistical histogram plot, generated by the simple command hist. Make a histogram of 100 random numbers.\nHint: Type hist(rnorm(100))\n\nhist(rnorm(100))\n\nThe script that opens up is the same as the script you made before, but with more plotting commands. Type submit() on the command line to run it (you don’t have to change anything yet).\nHint: Change plotting parameters in the script, save it and type submit() on the command line.\n\n# Text behind the #-sign is not evaluated as code by R. \n# This is useful, because it allows you to add comments explaining what the script does.\n\n# Make data frame\nx1 = rnorm(100)\nx2 = rnorm(100)\nx3 = rnorm(100)\nt = data.frame(a=x1, b=x1+x2, c=x1+x2+x3)\n\n# Plot data frame\nplot(t$a, type='l', ylim=range(t), lwd=3, col=rgb(1,0,0,0.3))\nlines(t$b, type='s', lwd=2, col=rgb(0.3,0.4,0.3,0.9))\npoints(t$c, pch=20, cex=4, col=rgb(0,0,1,0.3))\n\n# Note that with plot you get a new plot window while points and lines add to the previous plot.\n\nTry to find out by experimenting what the meaning is of rgb, the last argument of rgb, lwd, pch, cex. Type play() on the command line to experiment. Modify lines 11, 12 and 13 of the script by putting your cursor there and pressing CTRL+ENTER. When you are finished, type nxt() and then ?par.\nHint: Type ?par or type skip() if you are not interested.\n\n?par\n\nYou searched for par in the R help. This is a useful page to learn more about formatting plots. Google ‘R color chart’ for a pdf file with a wealth of color options.\nTo copy your plot to a document, go to the plots window, click the ‘Export’ button, choose the nicest width and height and click ‘Copy’ or ‘Save’.\nAfter having almost completed the second learning module, you are getting closer to become a nerd as you know…\n…that everything in R is stored in objects (values, vectors, matrices, lists, or data frames),\n…that you should always work in scripts and send code from scripts to the Console,\n…that you can do it if you don’t give up.\nPlease continue choosing another swirl learning module.\n\n\n\n\n2.2.1 swirl modules on data analytical basics\nIn my swirl modules huber-data-1, huber-data-2, and huber-data-3 I introduce some very basic statistical principles on how to analyse data.\n\n\n2.2.2 swirl module on the tidyverse package\nI compiled a short swirl module to introduce the tidyverse universe. This is a powerful collection of packages which I discuss later on. The learning module is also part of my swirl-it course.\n\n\n2.2.3 Other swirl modules\nYou can also install some other courses. You find a list of courses here http://swirlstats.com/scn/index.html or here https://github.com/swirldev/swirl_courses.\nI recommend this one as it gives a general overview on very basic principles of R:\n\nlibrary(swirl)\ninstall_course_github(\"swirldev\", \"R_Programming_E\")\nswirl()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Learn interactively with swirl</span>"
    ]
  }
]